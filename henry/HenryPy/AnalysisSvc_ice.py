# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `AnalysisSvc.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import Types_ice

# Included module HenryIce
_M_HenryIce = Ice.openModule('HenryIce')

# Start of module HenryIce
__name__ = 'HenryIce'

if 'AnalysisSvc' not in _M_HenryIce.__dict__:
    _M_HenryIce.AnalysisSvc = Ice.createTempClass()
    class AnalysisSvc(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_HenryIce.AnalysisSvc:
                raise RuntimeError('HenryIce.AnalysisSvc is an abstract class')

        def ice_ids(self, current=None):
            return ('::HenryIce::AnalysisSvc', '::Ice::Object')

        def ice_id(self, current=None):
            return '::HenryIce::AnalysisSvc'

        def ice_staticId():
            return '::HenryIce::AnalysisSvc'
        ice_staticId = staticmethod(ice_staticId)

        def setThreadPoolSize(self, n, current=None):
            """Sets the number of threads for parallel execution. Must be called before the
            first simulation is performed, otherwise simulations will be done synchronously.
            Arguments:
            n -- 
            current -- The Current object for the invocation."""
            pass

        def battingProbsLabels(self, current=None):
            """Returns labels for batting probabilities.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def pitchingProbsLabels(self, current=None):
            """Returns labels for pitching probabilities.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def fieldingProbsLabels(self, current=None):
            """Returns labels for fielding probabilities.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def covarMatrixLabels(self, current=None):
            """Returns labels for batter and pitcher covariance matrix.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def battingProbs(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, bUse2Seasons, current=None):
            """Returns unconditional batting probabilities for the player, R/L, team or league and ballpark
            within a season.
            Arguments:
            sBatter -- 
            cBatterSide -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nSeason -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def fieldingProbs(self, sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, bUse2Seasons, current=None):
            """Returns unconditional fielding probabilities for the player, team or league and ballpark
            within a season.
            Arguments:
            sFielder -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nPos -- 
            nSeason -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def pitchingProbs(self, sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nSeason, bUse2Seasons, current=None):
            """Returns unconditional pitching probabilities for the player, R/L, team or league and ballpark
            within a season.
            Arguments:
            sPitcher -- 
            cPitcherHand -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nSeason -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def condBattingProbs(self, sBatter, sPitcher, nSeason, bUse2Seasons, current=None):
            """Returns batting probabilities conditional on the given pitcher.
            Arguments:
            sBatter -- 
            sPitcher -- 
            nSeason -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def condBattedBallProbs(self, sBatter, sPitcher, nContactType, nSeason, bUse2Seasons, current=None):
            """Returns batted ball probabilities conditional on the given pitcher.
            Arguments:
            sBatter -- 
            sPitcher -- 
            nContactType -- 
            nSeason -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def condHitProbs(self, sBatter, fielders, positions, nHitType, nContactType, nSeason, bUse2Seasons, current=None):
            """Returns hit probabilities conditional on the given fielders.
            Arguments:
            sBatter -- 
            fielders -- 
            positions -- 
            nHitType -- 
            nContactType -- 
            nSeason -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def condBaseRunningProbs(self, sRunner, fielders, positions, nAdvType, nSuccess, nSeason, bUse2Seasons, current=None):
            """Returns base running probabilities conditional on the given fielders.
            Arguments:
            sRunner -- 
            fielders -- 
            positions -- 
            nAdvType -- 
            nSuccess -- 
            nSeason -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def batterCovarMatrix(self, sBatter, nSeason, current=None):
            """Returns the variance-covariance matrix for a batter and season.
            Arguments:
            sBatter -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def pitcherCovarMatrix(self, sPitcher, nSeason, current=None):
            """Returns the variance-covariance matrix for a pitcher and season.
            Arguments:
            sPitcher -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def simulateBatter(self, sBatter, fielders, positions, inning, nOuts, sRunner1B, sRunner2B, sRunner3B, nSeason, bUse2Seasons, bPlayerVol, current=None):
            """Simulates an at bat and returns change in expected runs.
            Arguments:
            sBatter -- 
            fielders -- 
            positions -- 
            inning -- 
            nOuts -- 
            sRunner1B -- 
            sRunner2B -- 
            sRunner3B -- 
            nSeason -- 
            bUse2Seasons -- 
            bPlayerVol -- 
            current -- The Current object for the invocation."""
            pass

        def staticLineup(self, sTeam, nSeason, nStatsSeason, nSeries, bDH, cVsPitcherHand, current=None):
            """Returns the static lineup vs R or L pitcher for the given team.
            Arguments:
            sTeam -- 
            nSeason -- 
            nStatsSeason -- 
            nSeries -- 
            bDH -- 
            cVsPitcherHand -- 
            current -- The Current object for the invocation."""
            pass

        def staticBench(self, sTeam, nSeason, nStatsSeason, nSeries, bDH, cVsPitcherHand, current=None):
            """Returns the static bench vs R or L pitcher for the given team.
            Arguments:
            sTeam -- 
            nSeason -- 
            nStatsSeason -- 
            nSeries -- 
            bDH -- 
            cVsPitcherHand -- 
            current -- The Current object for the invocation."""
            pass

        def dynamicLineup(self, sTeam, asOfdate, nSeries, bDH, cVsPitcherHand, current=None):
            """Returns the probabilistic lineup vs R or L pitcher for the given team.
            Arguments:
            sTeam -- 
            asOfdate -- 
            nSeries -- 
            bDH -- 
            cVsPitcherHand -- 
            current -- The Current object for the invocation."""
            pass

        def dynamicBench(self, sTeam, asOfdate, nSeries, bDH, cVsPitcherHand, current=None):
            """Returns the probabilistic bench vs R or L pitcher for the given team.
            Arguments:
            sTeam -- 
            asOfdate -- 
            nSeries -- 
            bDH -- 
            cVsPitcherHand -- 
            current -- The Current object for the invocation."""
            pass

        def teamBatters(self, sTeam, asOfdate, bSeason, current=None):
            """Returns all batters for the given team as of the given date or entire season.
            Arguments:
            sTeam -- 
            asOfdate -- 
            bSeason -- 
            current -- The Current object for the invocation."""
            pass

        def teamPitchers(self, sTeam, asOfdate, bSeason, current=None):
            """Returns all pitchers for the given team as of the given date or entire season.
            Arguments:
            sTeam -- 
            asOfdate -- 
            bSeason -- 
            current -- The Current object for the invocation."""
            pass

        def mgrMoveLabels(self, current=None):
            """Returns labels for manager moves.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def defaultMgrMoves(self, sTeam, date, bHome, bDH, cVsPitcherHand, current=None):
            """Returns default manager moves for the given team and date.
            Arguments:
            sTeam -- 
            date -- 
            bHome -- 
            bDH -- 
            cVsPitcherHand -- 
            current -- The Current object for the invocation."""
            pass

        def mgrMoves(self, sTeam, nSeason, bHome, bDH, bench, benchPos, current=None):
            """Returns manager moves for the given team based on the bench.
            Arguments:
            sTeam -- 
            nSeason -- 
            bHome -- 
            bDH -- 
            bench -- 
            benchPos -- 
            current -- The Current object for the invocation."""
            pass

        def setTeamCorrel(self, sSimName, cSimType, sTeam, nSeason, correl, current=None):
            """Sets custom team correlation for a simulator.
            Arguments:
            sSimName -- 
            cSimType -- 
            sTeam -- 
            nSeason -- 
            correl -- 
            current -- The Current object for the invocation."""
            pass

        def getTeamCorrel(self, sSimName, cSimType, sTeam, nSeason, current=None):
            """Returns custom or default team correlation for a simulator.
            Arguments:
            sSimName -- 
            cSimType -- 
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def getTeamCorrels(self, nSeason, current=None):
            """Returns previously calculated correlations for all teams for the
            given season.
            Arguments:
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def getTeamCorrels2(self, teams, nSeason, current=None):
            """Returns previously calculated correlations for the teams and season.
            Arguments:
            teams -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def simulateGame(self, sSimName, homeLineup, homePositions, homeTeams, awayLineup, awayPositions, awayTeams, homeBench, homeBenchPos, homeBenchTeams, awayBench, awayBenchPos, awayBenchTeams, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1B, sRunner2B, sRunner3B, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, current=None):
            """Simulates a game.
            Arguments:
            sSimName -- 
            homeLineup -- 
            homePositions -- 
            homeTeams -- 
            awayLineup -- 
            awayPositions -- 
            awayTeams -- 
            homeBench -- 
            homeBenchPos -- 
            homeBenchTeams -- 
            awayBench -- 
            awayBenchPos -- 
            awayBenchTeams -- 
            nHomeBatter -- 
            nAwayBatter -- 
            nHomeScore -- 
            nAwayScore -- 
            inning -- 
            cTopBottom -- 
            nOuts -- 
            sRunner1B -- 
            sRunner2B -- 
            sRunner3B -- 
            mgrMoves -- 
            nHomeSeason -- 
            nAwaySeason -- 
            bUse2Seasons -- 
            numOuts -- 
            numPaths -- 
            nSeed -- 
            bPlayerVol -- 
            bTeamCorrel -- 
            bRecordStats -- 
            current -- The Current object for the invocation."""
            pass

        def simulateGame2(self, sSimName, homeLineupIDs, homePositions, awayLineupIDs, awayPositions, homeBenchIDs, homeBenchPos, awayBenchIDs, awayBenchPos, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1BID, sRunner2BID, sRunner3BID, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, current=None):
            """Simulates a game.
            Arguments:
            sSimName -- 
            homeLineupIDs -- 
            homePositions -- 
            awayLineupIDs -- 
            awayPositions -- 
            homeBenchIDs -- 
            homeBenchPos -- 
            awayBenchIDs -- 
            awayBenchPos -- 
            nHomeBatter -- 
            nAwayBatter -- 
            nHomeScore -- 
            nAwayScore -- 
            inning -- 
            cTopBottom -- 
            nOuts -- 
            sRunner1BID -- 
            sRunner2BID -- 
            sRunner3BID -- 
            mgrMoves -- 
            nHomeSeason -- 
            nAwaySeason -- 
            bUse2Seasons -- 
            numOuts -- 
            numPaths -- 
            nSeed -- 
            bPlayerVol -- 
            bTeamCorrel -- 
            bRecordStats -- 
            current -- The Current object for the invocation."""
            pass

        def createGameSimulator(self, sSimName, homeLineup, homePositions, homeTeams, awayLineup, awayPositions, awayTeams, homeBench, homeBenchPos, homeBenchTeams, awayBench, awayBenchPos, awayBenchTeams, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1B, sRunner2B, sRunner3B, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, current=None):
            """Creates a game simulator.
            Arguments:
            sSimName -- 
            homeLineup -- 
            homePositions -- 
            homeTeams -- 
            awayLineup -- 
            awayPositions -- 
            awayTeams -- 
            homeBench -- 
            homeBenchPos -- 
            homeBenchTeams -- 
            awayBench -- 
            awayBenchPos -- 
            awayBenchTeams -- 
            nHomeBatter -- 
            nAwayBatter -- 
            nHomeScore -- 
            nAwayScore -- 
            inning -- 
            cTopBottom -- 
            nOuts -- 
            sRunner1B -- 
            sRunner2B -- 
            sRunner3B -- 
            mgrMoves -- 
            nHomeSeason -- 
            nAwaySeason -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def createGameSimulator2(self, sSimName, homeLineupIDs, homePositions, awayLineupIDs, awayPositions, homeBenchIDs, homeBenchPos, awayBenchIDs, awayBenchPos, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1BID, sRunner2BID, sRunner3BID, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, current=None):
            """Creates a game simulator.
            Arguments:
            sSimName -- 
            homeLineupIDs -- 
            homePositions -- 
            awayLineupIDs -- 
            awayPositions -- 
            homeBenchIDs -- 
            homeBenchPos -- 
            awayBenchIDs -- 
            awayBenchPos -- 
            nHomeBatter -- 
            nAwayBatter -- 
            nHomeScore -- 
            nAwayScore -- 
            inning -- 
            cTopBottom -- 
            nOuts -- 
            sRunner1BID -- 
            sRunner2BID -- 
            sRunner3BID -- 
            mgrMoves -- 
            nHomeSeason -- 
            nAwaySeason -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def simulateGame3(self, sSimName, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, current=None):
            """Runs the GameSimulator with the given name.
            Arguments:
            sSimName -- 
            numOuts -- 
            numPaths -- 
            nSeed -- 
            bPlayerVol -- 
            bTeamCorrel -- 
            bRecordStats -- 
            current -- The Current object for the invocation."""
            pass

        def createSeriesSimulator(self, sSimName, sHomeTeam, sAwayTeam, homeLineupVsR, homePosVsR, awayLineupVsR, awayPosVsR, homeLineupVsL, homePosVsL, awayLineupVsL, awayPosVsL, homeBenchVsR, homeBenchPosVsR, awayBenchVsR, awayBenchPosVsR, homeBenchVsL, homeBenchPosVsL, awayBenchVsL, awayBenchPosVsL, mgrMoves, nHomeSeason, nAwaySeason, nHomeStatsSeason, nAwayStatsSeason, nSeries, numGames, bUse2Seasons, current=None):
            """Creates and caches a series simulator between 2 teams.
            Arguments:
            sSimName -- 
            sHomeTeam -- 
            sAwayTeam -- 
            homeLineupVsR -- 
            homePosVsR -- 
            awayLineupVsR -- 
            awayPosVsR -- 
            homeLineupVsL -- 
            homePosVsL -- 
            awayLineupVsL -- 
            awayPosVsL -- 
            homeBenchVsR -- 
            homeBenchPosVsR -- 
            awayBenchVsR -- 
            awayBenchPosVsR -- 
            homeBenchVsL -- 
            homeBenchPosVsL -- 
            awayBenchVsL -- 
            awayBenchPosVsL -- 
            mgrMoves -- 
            nHomeSeason -- 
            nAwaySeason -- 
            nHomeStatsSeason -- 
            nAwayStatsSeason -- 
            nSeries -- 
            numGames -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def createSeriesSimulator2(self, sSimName, sHomeTeamID, sAwayTeamID, homeLineupVsRIDs, homePosVsR, awayLineupVsRIDs, awayPosVsR, homeLineupVsLIDs, homePosVsL, awayLineupVsLIDs, awayPosVsL, homeBenchVsRIDs, homeBenchPosVsR, awayBenchVsRIDs, awayBenchPosVsR, homeBenchVsLIDs, homeBenchPosVsL, awayBenchVsLIDs, awayBenchPosVsL, mgrMoves, nHomeSeason, nAwaySeason, nHomeStatsSeason, nAwayStatsSeason, nSeries, numGames, bUse2Seasons, current=None):
            """Creates and caches a series simulator between 2 teams.
            Arguments:
            sSimName -- 
            sHomeTeamID -- 
            sAwayTeamID -- 
            homeLineupVsRIDs -- 
            homePosVsR -- 
            awayLineupVsRIDs -- 
            awayPosVsR -- 
            homeLineupVsLIDs -- 
            homePosVsL -- 
            awayLineupVsLIDs -- 
            awayPosVsL -- 
            homeBenchVsRIDs -- 
            homeBenchPosVsR -- 
            awayBenchVsRIDs -- 
            awayBenchPosVsR -- 
            homeBenchVsLIDs -- 
            homeBenchPosVsL -- 
            awayBenchVsLIDs -- 
            awayBenchPosVsL -- 
            mgrMoves -- 
            nHomeSeason -- 
            nAwaySeason -- 
            nHomeStatsSeason -- 
            nAwayStatsSeason -- 
            nSeries -- 
            numGames -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def simulateSeries(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, current=None):
            """Runs the SeriesSimulator with the given name.
            Arguments:
            sSimName -- 
            numPaths -- 
            nSeed -- 
            bPlayerVol -- 
            bTeamCorrel -- 
            bRecordStats -- 
            current -- The Current object for the invocation."""
            pass

        def setPlayerGames(self, sSimName, sSimType, sPlayer, sTeam, nSeries, first, last, nGames, nStarts, current=None):
            """Sets the number of games and starts to override actual data.
            Arguments:
            sSimName -- 
            sSimType -- 
            sPlayer -- 
            sTeam -- 
            nSeries -- 
            first -- 
            last -- 
            nGames -- 
            nStarts -- 
            current -- The Current object for the invocation."""
            pass

        def getPlayerGames(self, sSimName, sSimType, sPlayer, sTeam, nSeries, asofDate, current=None):
            """Returns the total number of game appearances for the given player by
            season and series for the team he was playing for on the given date.
            Arguments:
            sSimName -- 
            sSimType -- 
            sPlayer -- 
            sTeam -- 
            nSeries -- 
            asofDate -- 
            current -- The Current object for the invocation."""
            pass

        def getPlayerStarts(self, sSimName, sSimType, sPlayer, sTeam, nSeries, asofdate, current=None):
            """Returns the total number of games started for the given player by
            season and series for the team he was playing for on the given date.
            Arguments:
            sSimName -- 
            sSimType -- 
            sPlayer -- 
            sTeam -- 
            nSeries -- 
            asofdate -- 
            current -- The Current object for the invocation."""
            pass

        def createTeamSeasonSimulator(self, sSimName, sTeam, lineupVsR, posVsR, lineupVsL, posVsL, benchVsR, benchPosVsR, benchVsL, benchPosVsL, mgrMoves, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons, current=None):
            """Creates and caches a season simulator for a given team.
            Arguments:
            sSimName -- 
            sTeam -- 
            lineupVsR -- 
            posVsR -- 
            lineupVsL -- 
            posVsL -- 
            benchVsR -- 
            benchPosVsR -- 
            benchVsL -- 
            benchPosVsL -- 
            mgrMoves -- 
            nTeamSeason -- 
            nOpponentSeason -- 
            nTeamStatsSeason -- 
            nOppStatsSeason -- 
            nType -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def createTeamSeasonSimulator2(self, sSimName, sTeam, lineupVsR, posVsR, teamsVsR, lineupVsL, posVsL, teamsVsL, benchVsR, benchPosVsR, benchTeamsVsR, benchVsL, benchPosVsL, benchTeamsVsL, mgrMoves, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons, current=None):
            """Creates and caches a season simulator for a given team.
            Arguments:
            sSimName -- 
            sTeam -- 
            lineupVsR -- 
            posVsR -- 
            teamsVsR -- 
            lineupVsL -- 
            posVsL -- 
            teamsVsL -- 
            benchVsR -- 
            benchPosVsR -- 
            benchTeamsVsR -- 
            benchVsL -- 
            benchPosVsL -- 
            benchTeamsVsL -- 
            mgrMoves -- 
            nTeamSeason -- 
            nOpponentSeason -- 
            nTeamStatsSeason -- 
            nOppStatsSeason -- 
            nType -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def createTeamSeasonSimulator3(self, sSimName, sTeam, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons, current=None):
            """Creates and caches a season simulator for a given team.
            Arguments:
            sSimName -- 
            sTeam -- 
            nTeamSeason -- 
            nOpponentSeason -- 
            nTeamStatsSeason -- 
            nOppStatsSeason -- 
            nType -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def simulateTeamSeason(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, current=None):
            """Runs the TeamSeasonSimulator with the given name.
            Arguments:
            sSimName -- 
            numPaths -- 
            nSeed -- 
            bPlayerVol -- 
            bTeamCorrel -- 
            bRecordStats -- 
            current -- The Current object for the invocation."""
            pass

        def createSeasonSimulator(self, sSimName, nSeason, nStatsSeason, nType, bUse2Seasons, current=None):
            """Creates and caches a season simulator for all teams.
            Arguments:
            sSimName -- 
            nSeason -- 
            nStatsSeason -- 
            nType -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def simulateSeason(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, current=None):
            """Runs the SeasonSimulator with the given name.
            Arguments:
            sSimName -- 
            numPaths -- 
            nSeed -- 
            bPlayerVol -- 
            bTeamCorrel -- 
            bRecordStats -- 
            current -- The Current object for the invocation."""
            pass

        def solveTeamCorrels(self, sSimName, numPaths, nSeed, bPlayerVol, maxIter, current=None):
            """Solves for team correls by fitting simulated and actual winning
            percentages using the SeasonSimulator with the given name.
            Arguments:
            sSimName -- 
            numPaths -- 
            nSeed -- 
            bPlayerVol -- 
            maxIter -- 
            current -- The Current object for the invocation."""
            pass

        def createPostSeasonSimulator(self, sSimName, alTeams, nlTeams, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons, current=None):
            """Creates and caches a post-season simulator for the given teams.
            Arguments:
            sSimName -- 
            alTeams -- 
            nlTeams -- 
            bALHome -- 
            nSeason -- 
            nStatsSeason -- 
            nType -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def createPostSeasonSimulator2(self, sSimName, alTeamIDs, nlTeamIDs, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons, current=None):
            """Creates and caches a post-season simulator for the given teams.
            Arguments:
            sSimName -- 
            alTeamIDs -- 
            nlTeamIDs -- 
            bALHome -- 
            nSeason -- 
            nStatsSeason -- 
            nType -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def createPostSeasonSimulator3(self, sSimName, sSeasonSimName, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons, current=None):
            """Creates and caches a post-season simulator based on the given regular
            season simulation.
            Arguments:
            sSimName -- 
            sSeasonSimName -- 
            bALHome -- 
            nSeason -- 
            nStatsSeason -- 
            nType -- 
            bUse2Seasons -- 
            current -- The Current object for the invocation."""
            pass

        def simulatePostSeason(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, current=None):
            """Runs the PostSeasonSimulator with the given name.
            Arguments:
            sSimName -- 
            numPaths -- 
            nSeed -- 
            bPlayerVol -- 
            bTeamCorrel -- 
            bRecordStats -- 
            current -- The Current object for the invocation."""
            pass

        def seasonStandings(self, nSeason, bWPA, current=None):
            """Returns actual final season standings for the given season.
            Arguments:
            nSeason -- 
            bWPA -- 
            current -- The Current object for the invocation."""
            pass

        def postSeasonTeams(self, nSeason, bAL, current=None):
            """Returns post-season teams for the given season and league.
            Arguments:
            nSeason -- 
            bAL -- 
            current -- The Current object for the invocation."""
            pass

        def simGameWins(self, sSimName, current=None):
            """Returns simulated wins for the home and away teams.
            Arguments:
            sSimName -- 
            current -- The Current object for the invocation."""
            pass

        def simGameAvgScore(self, sSimName, current=None):
            """Returns simulated average home and away score.
            Arguments:
            sSimName -- 
            current -- The Current object for the invocation."""
            pass

        def simGameScoreDistribution(self, sSimName, bHome, current=None):
            """Returns simulated score (runs) distribution for the home or
            away team.
            Arguments:
            sSimName -- 
            bHome -- 
            current -- The Current object for the invocation."""
            pass

        def simSeriesWins(self, sSimName, current=None):
            """Returns simulated series wins for the home and away teams.
            Arguments:
            sSimName -- 
            current -- The Current object for the invocation."""
            pass

        def simSeriesAvgGameWins(self, sSimName, current=None):
            """Returns simulated average game wins for the home and away teams.
            Arguments:
            sSimName -- 
            current -- The Current object for the invocation."""
            pass

        def simSeriesGameWinDistribution(self, sSimName, bHome, current=None):
            """Returns simulated game wins distribution for the home or away team.
            Arguments:
            sSimName -- 
            bHome -- 
            current -- The Current object for the invocation."""
            pass

        def simSeasonWins(self, sSimName, cSimType, sTeam, current=None):
            """Returns simulated average wins and losses for the team.
            Arguments:
            sSimName -- 
            cSimType -- 
            sTeam -- 
            current -- The Current object for the invocation."""
            pass

        def simSeasonStandings(self, sSimName, current=None):
            """Returns simulated expected season standings.
            Arguments:
            sSimName -- 
            current -- The Current object for the invocation."""
            pass

        def simSeasonWinDistribution(self, sSimName, cSimType, sTeam, current=None):
            """Returns simulated win distribution for the team.
            Arguments:
            sSimName -- 
            cSimType -- 
            sTeam -- 
            current -- The Current object for the invocation."""
            pass

        def simPostSeasonResults(self, sSimName, current=None):
            """Returns simulated post-season results.
            Arguments:
            sSimName -- 
            current -- The Current object for the invocation."""
            pass

        def simBattingStats(self, sSimName, cSimType, sBatter, sTeam, nPos, current=None):
            """Returns simulated batting stats for the player by position.
            Arguments:
            sSimName -- 
            cSimType -- 
            sBatter -- 
            sTeam -- 
            nPos -- 
            current -- The Current object for the invocation."""
            pass

        def simFieldingStats(self, sSimName, cSimType, sFielder, sTeam, nPos, current=None):
            """Returns simulated fielding stats for the player by position.
            Arguments:
            sSimName -- 
            cSimType -- 
            sFielder -- 
            sTeam -- 
            nPos -- 
            current -- The Current object for the invocation."""
            pass

        def simPitchingStats(self, sSimName, cSimType, sPitcher, sTeam, current=None):
            """Returns simulated pitching stats for the player.
            Arguments:
            sSimName -- 
            cSimType -- 
            sPitcher -- 
            sTeam -- 
            current -- The Current object for the invocation."""
            pass

        def simSortBattingStats(self, sSimName, cSimType, bTeam, sSortMetric, minPA, bDescOrder, current=None):
            """Returns simulated batting stats for all players or teams sorted
            by a chosen metric.
            Arguments:
            sSimName -- 
            cSimType -- 
            bTeam -- 
            sSortMetric -- 
            minPA -- 
            bDescOrder -- 
            current -- The Current object for the invocation."""
            pass

        def simSortFieldingStats(self, sSimName, cSimType, bTeam, sSortMetric, minCH, bDescOrder, current=None):
            """Returns simulated fielding stats for all players or teams sorted
            by a chosen metric.
            Arguments:
            sSimName -- 
            cSimType -- 
            bTeam -- 
            sSortMetric -- 
            minCH -- 
            bDescOrder -- 
            current -- The Current object for the invocation."""
            pass

        def simSortPitchingStats(self, sSimName, cSimType, bTeam, sSortMetric, minBF, bDescOrder, current=None):
            """Returns simulated pitching stats for all players or teams sorted
            by a chosen metric.
            Arguments:
            sSimName -- 
            cSimType -- 
            bTeam -- 
            sSortMetric -- 
            minBF -- 
            bDescOrder -- 
            current -- The Current object for the invocation."""
            pass

        def simSortBattingReturn(self, nStartSeason, nEndSeason, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sSortMetric, minPA, bDescOrder, current=None):
            """Calculates total return stats for batters.
            Arguments:
            nStartSeason -- 
            nEndSeason -- 
            nType -- 
            bTeamCorrel -- 
            bPlayerVol -- 
            bUse2Seasons -- 
            numPaths -- 
            sSortMetric -- 
            minPA -- 
            bDescOrder -- 
            current -- The Current object for the invocation."""
            pass

        def simSortPitchingReturn(self, nStartSeason, nEndSeason, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sSortMetric, minBF, bDescOrder, current=None):
            """Calculates total return stats for pitchers.
            Arguments:
            nStartSeason -- 
            nEndSeason -- 
            nType -- 
            bTeamCorrel -- 
            bPlayerVol -- 
            bUse2Seasons -- 
            numPaths -- 
            sSortMetric -- 
            minBF -- 
            bDescOrder -- 
            current -- The Current object for the invocation."""
            pass

        def backtestTeamReturn(self, sTeam, nSeason, numHistSeasons, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sBattingReturnStat, sPitchingReturnStat, cProjType, minSeasons, minPA, minBF, sBattingCompStat, sPitchingCompStat, battingCompDiff, pitchingCompDiff, bAllPlayers, maxAltPlayers, current=None):
            """Determines alternative players for a team based on return.
            Arguments:
            sTeam -- 
            nSeason -- 
            numHistSeasons -- 
            nType -- 
            bTeamCorrel -- 
            bPlayerVol -- 
            bUse2Seasons -- 
            numPaths -- 
            sBattingReturnStat -- 
            sPitchingReturnStat -- 
            cProjType -- 
            minSeasons -- 
            minPA -- 
            minBF -- 
            sBattingCompStat -- 
            sPitchingCompStat -- 
            battingCompDiff -- 
            pitchingCompDiff -- 
            bAllPlayers -- 
            maxAltPlayers -- 
            current -- The Current object for the invocation."""
            pass

        def backtestReturn(self, nStartSeason, nEndSeason, numHistSeasons, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sBattingReturnStat, sPitchingReturnStat, cProjType, minSeasons, minPA, minBF, sBattingCompStat, sPitchingCompStat, battingCompDiff, pitchingCompDiff, bAllPlayers, current=None):
            """Backtests return-based player decisions for all teams over a range of seasons.
            Arguments:
            nStartSeason -- 
            nEndSeason -- 
            numHistSeasons -- 
            nType -- 
            bTeamCorrel -- 
            bPlayerVol -- 
            bUse2Seasons -- 
            numPaths -- 
            sBattingReturnStat -- 
            sPitchingReturnStat -- 
            cProjType -- 
            minSeasons -- 
            minPA -- 
            minBF -- 
            sBattingCompStat -- 
            sPitchingCompStat -- 
            battingCompDiff -- 
            pitchingCompDiff -- 
            bAllPlayers -- 
            current -- The Current object for the invocation."""
            pass

        def saveSimulator(self, sSimName, cSimType, current=None):
            """Saves the simulator and results to a separate database.
            Arguments:
            sSimName -- 
            cSimType -- 
            current -- The Current object for the invocation."""
            pass

        def clearSimulators(self, current=None):
            """Clears all simulators from cache but does not delete from database.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_HenryIce._t_AnalysisSvc)

        __repr__ = __str__

    _M_HenryIce.AnalysisSvcPrx = Ice.createTempClass()
    class AnalysisSvcPrx(Ice.ObjectPrx):

        """Sets the number of threads for parallel execution. Must be called before the
        first simulation is performed, otherwise simulations will be done synchronously.
        Arguments:
        n -- 
        _ctx -- The request context for the invocation."""
        def setThreadPoolSize(self, n, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_setThreadPoolSize.invoke(self, ((n, ), _ctx))

        """Sets the number of threads for parallel execution. Must be called before the
        first simulation is performed, otherwise simulations will be done synchronously.
        Arguments:
        n -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_setThreadPoolSize(self, n, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_setThreadPoolSize.begin(self, ((n, ), _response, _ex, _sent, _ctx))

        """Sets the number of threads for parallel execution. Must be called before the
        first simulation is performed, otherwise simulations will be done synchronously.
        Arguments:
        n -- """
        def end_setThreadPoolSize(self, _r):
            return _M_HenryIce.AnalysisSvc._op_setThreadPoolSize.end(self, _r)

        """Returns labels for batting probabilities.
        Arguments:
        _ctx -- The request context for the invocation."""
        def battingProbsLabels(self, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_battingProbsLabels.invoke(self, ((), _ctx))

        """Returns labels for batting probabilities.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingProbsLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_battingProbsLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for batting probabilities.
        Arguments:"""
        def end_battingProbsLabels(self, _r):
            return _M_HenryIce.AnalysisSvc._op_battingProbsLabels.end(self, _r)

        """Returns labels for pitching probabilities.
        Arguments:
        _ctx -- The request context for the invocation."""
        def pitchingProbsLabels(self, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_pitchingProbsLabels.invoke(self, ((), _ctx))

        """Returns labels for pitching probabilities.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_pitchingProbsLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_pitchingProbsLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for pitching probabilities.
        Arguments:"""
        def end_pitchingProbsLabels(self, _r):
            return _M_HenryIce.AnalysisSvc._op_pitchingProbsLabels.end(self, _r)

        """Returns labels for fielding probabilities.
        Arguments:
        _ctx -- The request context for the invocation."""
        def fieldingProbsLabels(self, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_fieldingProbsLabels.invoke(self, ((), _ctx))

        """Returns labels for fielding probabilities.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_fieldingProbsLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_fieldingProbsLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for fielding probabilities.
        Arguments:"""
        def end_fieldingProbsLabels(self, _r):
            return _M_HenryIce.AnalysisSvc._op_fieldingProbsLabels.end(self, _r)

        """Returns labels for batter and pitcher covariance matrix.
        Arguments:
        _ctx -- The request context for the invocation."""
        def covarMatrixLabels(self, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_covarMatrixLabels.invoke(self, ((), _ctx))

        """Returns labels for batter and pitcher covariance matrix.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_covarMatrixLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_covarMatrixLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for batter and pitcher covariance matrix.
        Arguments:"""
        def end_covarMatrixLabels(self, _r):
            return _M_HenryIce.AnalysisSvc._op_covarMatrixLabels.end(self, _r)

        """Returns unconditional batting probabilities for the player, R/L, team or league and ballpark
        within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def battingProbs(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_battingProbs.invoke(self, ((sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, bUse2Seasons), _ctx))

        """Returns unconditional batting probabilities for the player, R/L, team or league and ballpark
        within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingProbs(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_battingProbs.begin(self, ((sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Returns unconditional batting probabilities for the player, R/L, team or league and ballpark
        within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        bUse2Seasons -- """
        def end_battingProbs(self, _r):
            return _M_HenryIce.AnalysisSvc._op_battingProbs.end(self, _r)

        """Returns unconditional fielding probabilities for the player, team or league and ballpark
        within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def fieldingProbs(self, sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_fieldingProbs.invoke(self, ((sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, bUse2Seasons), _ctx))

        """Returns unconditional fielding probabilities for the player, team or league and ballpark
        within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_fieldingProbs(self, sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_fieldingProbs.begin(self, ((sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Returns unconditional fielding probabilities for the player, team or league and ballpark
        within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        bUse2Seasons -- """
        def end_fieldingProbs(self, _r):
            return _M_HenryIce.AnalysisSvc._op_fieldingProbs.end(self, _r)

        """Returns unconditional pitching probabilities for the player, R/L, team or league and ballpark
        within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def pitchingProbs(self, sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nSeason, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_pitchingProbs.invoke(self, ((sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nSeason, bUse2Seasons), _ctx))

        """Returns unconditional pitching probabilities for the player, R/L, team or league and ballpark
        within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_pitchingProbs(self, sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nSeason, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_pitchingProbs.begin(self, ((sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nSeason, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Returns unconditional pitching probabilities for the player, R/L, team or league and ballpark
        within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        bUse2Seasons -- """
        def end_pitchingProbs(self, _r):
            return _M_HenryIce.AnalysisSvc._op_pitchingProbs.end(self, _r)

        """Returns batting probabilities conditional on the given pitcher.
        Arguments:
        sBatter -- 
        sPitcher -- 
        nSeason -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def condBattingProbs(self, sBatter, sPitcher, nSeason, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_condBattingProbs.invoke(self, ((sBatter, sPitcher, nSeason, bUse2Seasons), _ctx))

        """Returns batting probabilities conditional on the given pitcher.
        Arguments:
        sBatter -- 
        sPitcher -- 
        nSeason -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_condBattingProbs(self, sBatter, sPitcher, nSeason, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_condBattingProbs.begin(self, ((sBatter, sPitcher, nSeason, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Returns batting probabilities conditional on the given pitcher.
        Arguments:
        sBatter -- 
        sPitcher -- 
        nSeason -- 
        bUse2Seasons -- """
        def end_condBattingProbs(self, _r):
            return _M_HenryIce.AnalysisSvc._op_condBattingProbs.end(self, _r)

        """Returns batted ball probabilities conditional on the given pitcher.
        Arguments:
        sBatter -- 
        sPitcher -- 
        nContactType -- 
        nSeason -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def condBattedBallProbs(self, sBatter, sPitcher, nContactType, nSeason, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_condBattedBallProbs.invoke(self, ((sBatter, sPitcher, nContactType, nSeason, bUse2Seasons), _ctx))

        """Returns batted ball probabilities conditional on the given pitcher.
        Arguments:
        sBatter -- 
        sPitcher -- 
        nContactType -- 
        nSeason -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_condBattedBallProbs(self, sBatter, sPitcher, nContactType, nSeason, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_condBattedBallProbs.begin(self, ((sBatter, sPitcher, nContactType, nSeason, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Returns batted ball probabilities conditional on the given pitcher.
        Arguments:
        sBatter -- 
        sPitcher -- 
        nContactType -- 
        nSeason -- 
        bUse2Seasons -- """
        def end_condBattedBallProbs(self, _r):
            return _M_HenryIce.AnalysisSvc._op_condBattedBallProbs.end(self, _r)

        """Returns hit probabilities conditional on the given fielders.
        Arguments:
        sBatter -- 
        fielders -- 
        positions -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def condHitProbs(self, sBatter, fielders, positions, nHitType, nContactType, nSeason, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_condHitProbs.invoke(self, ((sBatter, fielders, positions, nHitType, nContactType, nSeason, bUse2Seasons), _ctx))

        """Returns hit probabilities conditional on the given fielders.
        Arguments:
        sBatter -- 
        fielders -- 
        positions -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_condHitProbs(self, sBatter, fielders, positions, nHitType, nContactType, nSeason, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_condHitProbs.begin(self, ((sBatter, fielders, positions, nHitType, nContactType, nSeason, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Returns hit probabilities conditional on the given fielders.
        Arguments:
        sBatter -- 
        fielders -- 
        positions -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        bUse2Seasons -- """
        def end_condHitProbs(self, _r):
            return _M_HenryIce.AnalysisSvc._op_condHitProbs.end(self, _r)

        """Returns base running probabilities conditional on the given fielders.
        Arguments:
        sRunner -- 
        fielders -- 
        positions -- 
        nAdvType -- 
        nSuccess -- 
        nSeason -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def condBaseRunningProbs(self, sRunner, fielders, positions, nAdvType, nSuccess, nSeason, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_condBaseRunningProbs.invoke(self, ((sRunner, fielders, positions, nAdvType, nSuccess, nSeason, bUse2Seasons), _ctx))

        """Returns base running probabilities conditional on the given fielders.
        Arguments:
        sRunner -- 
        fielders -- 
        positions -- 
        nAdvType -- 
        nSuccess -- 
        nSeason -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_condBaseRunningProbs(self, sRunner, fielders, positions, nAdvType, nSuccess, nSeason, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_condBaseRunningProbs.begin(self, ((sRunner, fielders, positions, nAdvType, nSuccess, nSeason, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Returns base running probabilities conditional on the given fielders.
        Arguments:
        sRunner -- 
        fielders -- 
        positions -- 
        nAdvType -- 
        nSuccess -- 
        nSeason -- 
        bUse2Seasons -- """
        def end_condBaseRunningProbs(self, _r):
            return _M_HenryIce.AnalysisSvc._op_condBaseRunningProbs.end(self, _r)

        """Returns the variance-covariance matrix for a batter and season.
        Arguments:
        sBatter -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def batterCovarMatrix(self, sBatter, nSeason, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_batterCovarMatrix.invoke(self, ((sBatter, nSeason), _ctx))

        """Returns the variance-covariance matrix for a batter and season.
        Arguments:
        sBatter -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_batterCovarMatrix(self, sBatter, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_batterCovarMatrix.begin(self, ((sBatter, nSeason), _response, _ex, _sent, _ctx))

        """Returns the variance-covariance matrix for a batter and season.
        Arguments:
        sBatter -- 
        nSeason -- """
        def end_batterCovarMatrix(self, _r):
            return _M_HenryIce.AnalysisSvc._op_batterCovarMatrix.end(self, _r)

        """Returns the variance-covariance matrix for a pitcher and season.
        Arguments:
        sPitcher -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def pitcherCovarMatrix(self, sPitcher, nSeason, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_pitcherCovarMatrix.invoke(self, ((sPitcher, nSeason), _ctx))

        """Returns the variance-covariance matrix for a pitcher and season.
        Arguments:
        sPitcher -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_pitcherCovarMatrix(self, sPitcher, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_pitcherCovarMatrix.begin(self, ((sPitcher, nSeason), _response, _ex, _sent, _ctx))

        """Returns the variance-covariance matrix for a pitcher and season.
        Arguments:
        sPitcher -- 
        nSeason -- """
        def end_pitcherCovarMatrix(self, _r):
            return _M_HenryIce.AnalysisSvc._op_pitcherCovarMatrix.end(self, _r)

        """Simulates an at bat and returns change in expected runs.
        Arguments:
        sBatter -- 
        fielders -- 
        positions -- 
        inning -- 
        nOuts -- 
        sRunner1B -- 
        sRunner2B -- 
        sRunner3B -- 
        nSeason -- 
        bUse2Seasons -- 
        bPlayerVol -- 
        _ctx -- The request context for the invocation."""
        def simulateBatter(self, sBatter, fielders, positions, inning, nOuts, sRunner1B, sRunner2B, sRunner3B, nSeason, bUse2Seasons, bPlayerVol, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateBatter.invoke(self, ((sBatter, fielders, positions, inning, nOuts, sRunner1B, sRunner2B, sRunner3B, nSeason, bUse2Seasons, bPlayerVol), _ctx))

        """Simulates an at bat and returns change in expected runs.
        Arguments:
        sBatter -- 
        fielders -- 
        positions -- 
        inning -- 
        nOuts -- 
        sRunner1B -- 
        sRunner2B -- 
        sRunner3B -- 
        nSeason -- 
        bUse2Seasons -- 
        bPlayerVol -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simulateBatter(self, sBatter, fielders, positions, inning, nOuts, sRunner1B, sRunner2B, sRunner3B, nSeason, bUse2Seasons, bPlayerVol, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateBatter.begin(self, ((sBatter, fielders, positions, inning, nOuts, sRunner1B, sRunner2B, sRunner3B, nSeason, bUse2Seasons, bPlayerVol), _response, _ex, _sent, _ctx))

        """Simulates an at bat and returns change in expected runs.
        Arguments:
        sBatter -- 
        fielders -- 
        positions -- 
        inning -- 
        nOuts -- 
        sRunner1B -- 
        sRunner2B -- 
        sRunner3B -- 
        nSeason -- 
        bUse2Seasons -- 
        bPlayerVol -- """
        def end_simulateBatter(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simulateBatter.end(self, _r)

        """Returns the static lineup vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        nSeason -- 
        nStatsSeason -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- 
        _ctx -- The request context for the invocation."""
        def staticLineup(self, sTeam, nSeason, nStatsSeason, nSeries, bDH, cVsPitcherHand, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_staticLineup.invoke(self, ((sTeam, nSeason, nStatsSeason, nSeries, bDH, cVsPitcherHand), _ctx))

        """Returns the static lineup vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        nSeason -- 
        nStatsSeason -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_staticLineup(self, sTeam, nSeason, nStatsSeason, nSeries, bDH, cVsPitcherHand, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_staticLineup.begin(self, ((sTeam, nSeason, nStatsSeason, nSeries, bDH, cVsPitcherHand), _response, _ex, _sent, _ctx))

        """Returns the static lineup vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        nSeason -- 
        nStatsSeason -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- """
        def end_staticLineup(self, _r):
            return _M_HenryIce.AnalysisSvc._op_staticLineup.end(self, _r)

        """Returns the static bench vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        nSeason -- 
        nStatsSeason -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- 
        _ctx -- The request context for the invocation."""
        def staticBench(self, sTeam, nSeason, nStatsSeason, nSeries, bDH, cVsPitcherHand, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_staticBench.invoke(self, ((sTeam, nSeason, nStatsSeason, nSeries, bDH, cVsPitcherHand), _ctx))

        """Returns the static bench vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        nSeason -- 
        nStatsSeason -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_staticBench(self, sTeam, nSeason, nStatsSeason, nSeries, bDH, cVsPitcherHand, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_staticBench.begin(self, ((sTeam, nSeason, nStatsSeason, nSeries, bDH, cVsPitcherHand), _response, _ex, _sent, _ctx))

        """Returns the static bench vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        nSeason -- 
        nStatsSeason -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- """
        def end_staticBench(self, _r):
            return _M_HenryIce.AnalysisSvc._op_staticBench.end(self, _r)

        """Returns the probabilistic lineup vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        asOfdate -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- 
        _ctx -- The request context for the invocation."""
        def dynamicLineup(self, sTeam, asOfdate, nSeries, bDH, cVsPitcherHand, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_dynamicLineup.invoke(self, ((sTeam, asOfdate, nSeries, bDH, cVsPitcherHand), _ctx))

        """Returns the probabilistic lineup vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        asOfdate -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_dynamicLineup(self, sTeam, asOfdate, nSeries, bDH, cVsPitcherHand, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_dynamicLineup.begin(self, ((sTeam, asOfdate, nSeries, bDH, cVsPitcherHand), _response, _ex, _sent, _ctx))

        """Returns the probabilistic lineup vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        asOfdate -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- """
        def end_dynamicLineup(self, _r):
            return _M_HenryIce.AnalysisSvc._op_dynamicLineup.end(self, _r)

        """Returns the probabilistic bench vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        asOfdate -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- 
        _ctx -- The request context for the invocation."""
        def dynamicBench(self, sTeam, asOfdate, nSeries, bDH, cVsPitcherHand, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_dynamicBench.invoke(self, ((sTeam, asOfdate, nSeries, bDH, cVsPitcherHand), _ctx))

        """Returns the probabilistic bench vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        asOfdate -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_dynamicBench(self, sTeam, asOfdate, nSeries, bDH, cVsPitcherHand, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_dynamicBench.begin(self, ((sTeam, asOfdate, nSeries, bDH, cVsPitcherHand), _response, _ex, _sent, _ctx))

        """Returns the probabilistic bench vs R or L pitcher for the given team.
        Arguments:
        sTeam -- 
        asOfdate -- 
        nSeries -- 
        bDH -- 
        cVsPitcherHand -- """
        def end_dynamicBench(self, _r):
            return _M_HenryIce.AnalysisSvc._op_dynamicBench.end(self, _r)

        """Returns all batters for the given team as of the given date or entire season.
        Arguments:
        sTeam -- 
        asOfdate -- 
        bSeason -- 
        _ctx -- The request context for the invocation."""
        def teamBatters(self, sTeam, asOfdate, bSeason, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_teamBatters.invoke(self, ((sTeam, asOfdate, bSeason), _ctx))

        """Returns all batters for the given team as of the given date or entire season.
        Arguments:
        sTeam -- 
        asOfdate -- 
        bSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamBatters(self, sTeam, asOfdate, bSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_teamBatters.begin(self, ((sTeam, asOfdate, bSeason), _response, _ex, _sent, _ctx))

        """Returns all batters for the given team as of the given date or entire season.
        Arguments:
        sTeam -- 
        asOfdate -- 
        bSeason -- """
        def end_teamBatters(self, _r):
            return _M_HenryIce.AnalysisSvc._op_teamBatters.end(self, _r)

        """Returns all pitchers for the given team as of the given date or entire season.
        Arguments:
        sTeam -- 
        asOfdate -- 
        bSeason -- 
        _ctx -- The request context for the invocation."""
        def teamPitchers(self, sTeam, asOfdate, bSeason, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_teamPitchers.invoke(self, ((sTeam, asOfdate, bSeason), _ctx))

        """Returns all pitchers for the given team as of the given date or entire season.
        Arguments:
        sTeam -- 
        asOfdate -- 
        bSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamPitchers(self, sTeam, asOfdate, bSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_teamPitchers.begin(self, ((sTeam, asOfdate, bSeason), _response, _ex, _sent, _ctx))

        """Returns all pitchers for the given team as of the given date or entire season.
        Arguments:
        sTeam -- 
        asOfdate -- 
        bSeason -- """
        def end_teamPitchers(self, _r):
            return _M_HenryIce.AnalysisSvc._op_teamPitchers.end(self, _r)

        """Returns labels for manager moves.
        Arguments:
        _ctx -- The request context for the invocation."""
        def mgrMoveLabels(self, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_mgrMoveLabels.invoke(self, ((), _ctx))

        """Returns labels for manager moves.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_mgrMoveLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_mgrMoveLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for manager moves.
        Arguments:"""
        def end_mgrMoveLabels(self, _r):
            return _M_HenryIce.AnalysisSvc._op_mgrMoveLabels.end(self, _r)

        """Returns default manager moves for the given team and date.
        Arguments:
        sTeam -- 
        date -- 
        bHome -- 
        bDH -- 
        cVsPitcherHand -- 
        _ctx -- The request context for the invocation."""
        def defaultMgrMoves(self, sTeam, date, bHome, bDH, cVsPitcherHand, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_defaultMgrMoves.invoke(self, ((sTeam, date, bHome, bDH, cVsPitcherHand), _ctx))

        """Returns default manager moves for the given team and date.
        Arguments:
        sTeam -- 
        date -- 
        bHome -- 
        bDH -- 
        cVsPitcherHand -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_defaultMgrMoves(self, sTeam, date, bHome, bDH, cVsPitcherHand, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_defaultMgrMoves.begin(self, ((sTeam, date, bHome, bDH, cVsPitcherHand), _response, _ex, _sent, _ctx))

        """Returns default manager moves for the given team and date.
        Arguments:
        sTeam -- 
        date -- 
        bHome -- 
        bDH -- 
        cVsPitcherHand -- """
        def end_defaultMgrMoves(self, _r):
            return _M_HenryIce.AnalysisSvc._op_defaultMgrMoves.end(self, _r)

        """Returns manager moves for the given team based on the bench.
        Arguments:
        sTeam -- 
        nSeason -- 
        bHome -- 
        bDH -- 
        bench -- 
        benchPos -- 
        _ctx -- The request context for the invocation."""
        def mgrMoves(self, sTeam, nSeason, bHome, bDH, bench, benchPos, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_mgrMoves.invoke(self, ((sTeam, nSeason, bHome, bDH, bench, benchPos), _ctx))

        """Returns manager moves for the given team based on the bench.
        Arguments:
        sTeam -- 
        nSeason -- 
        bHome -- 
        bDH -- 
        bench -- 
        benchPos -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_mgrMoves(self, sTeam, nSeason, bHome, bDH, bench, benchPos, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_mgrMoves.begin(self, ((sTeam, nSeason, bHome, bDH, bench, benchPos), _response, _ex, _sent, _ctx))

        """Returns manager moves for the given team based on the bench.
        Arguments:
        sTeam -- 
        nSeason -- 
        bHome -- 
        bDH -- 
        bench -- 
        benchPos -- """
        def end_mgrMoves(self, _r):
            return _M_HenryIce.AnalysisSvc._op_mgrMoves.end(self, _r)

        """Sets custom team correlation for a simulator.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- 
        nSeason -- 
        correl -- 
        _ctx -- The request context for the invocation."""
        def setTeamCorrel(self, sSimName, cSimType, sTeam, nSeason, correl, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_setTeamCorrel.invoke(self, ((sSimName, cSimType, sTeam, nSeason, correl), _ctx))

        """Sets custom team correlation for a simulator.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- 
        nSeason -- 
        correl -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_setTeamCorrel(self, sSimName, cSimType, sTeam, nSeason, correl, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_setTeamCorrel.begin(self, ((sSimName, cSimType, sTeam, nSeason, correl), _response, _ex, _sent, _ctx))

        """Sets custom team correlation for a simulator.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- 
        nSeason -- 
        correl -- """
        def end_setTeamCorrel(self, _r):
            return _M_HenryIce.AnalysisSvc._op_setTeamCorrel.end(self, _r)

        """Returns custom or default team correlation for a simulator.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def getTeamCorrel(self, sSimName, cSimType, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_getTeamCorrel.invoke(self, ((sSimName, cSimType, sTeam, nSeason), _ctx))

        """Returns custom or default team correlation for a simulator.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_getTeamCorrel(self, sSimName, cSimType, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_getTeamCorrel.begin(self, ((sSimName, cSimType, sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns custom or default team correlation for a simulator.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- 
        nSeason -- """
        def end_getTeamCorrel(self, _r):
            return _M_HenryIce.AnalysisSvc._op_getTeamCorrel.end(self, _r)

        """Returns previously calculated correlations for all teams for the
        given season.
        Arguments:
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def getTeamCorrels(self, nSeason, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_getTeamCorrels.invoke(self, ((nSeason, ), _ctx))

        """Returns previously calculated correlations for all teams for the
        given season.
        Arguments:
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_getTeamCorrels(self, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_getTeamCorrels.begin(self, ((nSeason, ), _response, _ex, _sent, _ctx))

        """Returns previously calculated correlations for all teams for the
        given season.
        Arguments:
        nSeason -- """
        def end_getTeamCorrels(self, _r):
            return _M_HenryIce.AnalysisSvc._op_getTeamCorrels.end(self, _r)

        """Returns previously calculated correlations for the teams and season.
        Arguments:
        teams -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def getTeamCorrels2(self, teams, nSeason, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_getTeamCorrels2.invoke(self, ((teams, nSeason), _ctx))

        """Returns previously calculated correlations for the teams and season.
        Arguments:
        teams -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_getTeamCorrels2(self, teams, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_getTeamCorrels2.begin(self, ((teams, nSeason), _response, _ex, _sent, _ctx))

        """Returns previously calculated correlations for the teams and season.
        Arguments:
        teams -- 
        nSeason -- """
        def end_getTeamCorrels2(self, _r):
            return _M_HenryIce.AnalysisSvc._op_getTeamCorrels2.end(self, _r)

        """Simulates a game.
        Arguments:
        sSimName -- 
        homeLineup -- 
        homePositions -- 
        homeTeams -- 
        awayLineup -- 
        awayPositions -- 
        awayTeams -- 
        homeBench -- 
        homeBenchPos -- 
        homeBenchTeams -- 
        awayBench -- 
        awayBenchPos -- 
        awayBenchTeams -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1B -- 
        sRunner2B -- 
        sRunner3B -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- 
        numOuts -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _ctx -- The request context for the invocation."""
        def simulateGame(self, sSimName, homeLineup, homePositions, homeTeams, awayLineup, awayPositions, awayTeams, homeBench, homeBenchPos, homeBenchTeams, awayBench, awayBenchPos, awayBenchTeams, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1B, sRunner2B, sRunner3B, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateGame.invoke(self, ((sSimName, homeLineup, homePositions, homeTeams, awayLineup, awayPositions, awayTeams, homeBench, homeBenchPos, homeBenchTeams, awayBench, awayBenchPos, awayBenchTeams, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1B, sRunner2B, sRunner3B, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _ctx))

        """Simulates a game.
        Arguments:
        sSimName -- 
        homeLineup -- 
        homePositions -- 
        homeTeams -- 
        awayLineup -- 
        awayPositions -- 
        awayTeams -- 
        homeBench -- 
        homeBenchPos -- 
        homeBenchTeams -- 
        awayBench -- 
        awayBenchPos -- 
        awayBenchTeams -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1B -- 
        sRunner2B -- 
        sRunner3B -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- 
        numOuts -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simulateGame(self, sSimName, homeLineup, homePositions, homeTeams, awayLineup, awayPositions, awayTeams, homeBench, homeBenchPos, homeBenchTeams, awayBench, awayBenchPos, awayBenchTeams, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1B, sRunner2B, sRunner3B, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateGame.begin(self, ((sSimName, homeLineup, homePositions, homeTeams, awayLineup, awayPositions, awayTeams, homeBench, homeBenchPos, homeBenchTeams, awayBench, awayBenchPos, awayBenchTeams, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1B, sRunner2B, sRunner3B, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _response, _ex, _sent, _ctx))

        """Simulates a game.
        Arguments:
        sSimName -- 
        homeLineup -- 
        homePositions -- 
        homeTeams -- 
        awayLineup -- 
        awayPositions -- 
        awayTeams -- 
        homeBench -- 
        homeBenchPos -- 
        homeBenchTeams -- 
        awayBench -- 
        awayBenchPos -- 
        awayBenchTeams -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1B -- 
        sRunner2B -- 
        sRunner3B -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- 
        numOuts -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- """
        def end_simulateGame(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simulateGame.end(self, _r)

        """Simulates a game.
        Arguments:
        sSimName -- 
        homeLineupIDs -- 
        homePositions -- 
        awayLineupIDs -- 
        awayPositions -- 
        homeBenchIDs -- 
        homeBenchPos -- 
        awayBenchIDs -- 
        awayBenchPos -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1BID -- 
        sRunner2BID -- 
        sRunner3BID -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- 
        numOuts -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _ctx -- The request context for the invocation."""
        def simulateGame2(self, sSimName, homeLineupIDs, homePositions, awayLineupIDs, awayPositions, homeBenchIDs, homeBenchPos, awayBenchIDs, awayBenchPos, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1BID, sRunner2BID, sRunner3BID, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateGame2.invoke(self, ((sSimName, homeLineupIDs, homePositions, awayLineupIDs, awayPositions, homeBenchIDs, homeBenchPos, awayBenchIDs, awayBenchPos, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1BID, sRunner2BID, sRunner3BID, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _ctx))

        """Simulates a game.
        Arguments:
        sSimName -- 
        homeLineupIDs -- 
        homePositions -- 
        awayLineupIDs -- 
        awayPositions -- 
        homeBenchIDs -- 
        homeBenchPos -- 
        awayBenchIDs -- 
        awayBenchPos -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1BID -- 
        sRunner2BID -- 
        sRunner3BID -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- 
        numOuts -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simulateGame2(self, sSimName, homeLineupIDs, homePositions, awayLineupIDs, awayPositions, homeBenchIDs, homeBenchPos, awayBenchIDs, awayBenchPos, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1BID, sRunner2BID, sRunner3BID, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateGame2.begin(self, ((sSimName, homeLineupIDs, homePositions, awayLineupIDs, awayPositions, homeBenchIDs, homeBenchPos, awayBenchIDs, awayBenchPos, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1BID, sRunner2BID, sRunner3BID, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _response, _ex, _sent, _ctx))

        """Simulates a game.
        Arguments:
        sSimName -- 
        homeLineupIDs -- 
        homePositions -- 
        awayLineupIDs -- 
        awayPositions -- 
        homeBenchIDs -- 
        homeBenchPos -- 
        awayBenchIDs -- 
        awayBenchPos -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1BID -- 
        sRunner2BID -- 
        sRunner3BID -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- 
        numOuts -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- """
        def end_simulateGame2(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simulateGame2.end(self, _r)

        """Creates a game simulator.
        Arguments:
        sSimName -- 
        homeLineup -- 
        homePositions -- 
        homeTeams -- 
        awayLineup -- 
        awayPositions -- 
        awayTeams -- 
        homeBench -- 
        homeBenchPos -- 
        homeBenchTeams -- 
        awayBench -- 
        awayBenchPos -- 
        awayBenchTeams -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1B -- 
        sRunner2B -- 
        sRunner3B -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createGameSimulator(self, sSimName, homeLineup, homePositions, homeTeams, awayLineup, awayPositions, awayTeams, homeBench, homeBenchPos, homeBenchTeams, awayBench, awayBenchPos, awayBenchTeams, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1B, sRunner2B, sRunner3B, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createGameSimulator.invoke(self, ((sSimName, homeLineup, homePositions, homeTeams, awayLineup, awayPositions, awayTeams, homeBench, homeBenchPos, homeBenchTeams, awayBench, awayBenchPos, awayBenchTeams, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1B, sRunner2B, sRunner3B, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons), _ctx))

        """Creates a game simulator.
        Arguments:
        sSimName -- 
        homeLineup -- 
        homePositions -- 
        homeTeams -- 
        awayLineup -- 
        awayPositions -- 
        awayTeams -- 
        homeBench -- 
        homeBenchPos -- 
        homeBenchTeams -- 
        awayBench -- 
        awayBenchPos -- 
        awayBenchTeams -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1B -- 
        sRunner2B -- 
        sRunner3B -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createGameSimulator(self, sSimName, homeLineup, homePositions, homeTeams, awayLineup, awayPositions, awayTeams, homeBench, homeBenchPos, homeBenchTeams, awayBench, awayBenchPos, awayBenchTeams, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1B, sRunner2B, sRunner3B, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createGameSimulator.begin(self, ((sSimName, homeLineup, homePositions, homeTeams, awayLineup, awayPositions, awayTeams, homeBench, homeBenchPos, homeBenchTeams, awayBench, awayBenchPos, awayBenchTeams, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1B, sRunner2B, sRunner3B, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates a game simulator.
        Arguments:
        sSimName -- 
        homeLineup -- 
        homePositions -- 
        homeTeams -- 
        awayLineup -- 
        awayPositions -- 
        awayTeams -- 
        homeBench -- 
        homeBenchPos -- 
        homeBenchTeams -- 
        awayBench -- 
        awayBenchPos -- 
        awayBenchTeams -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1B -- 
        sRunner2B -- 
        sRunner3B -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- """
        def end_createGameSimulator(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createGameSimulator.end(self, _r)

        """Creates a game simulator.
        Arguments:
        sSimName -- 
        homeLineupIDs -- 
        homePositions -- 
        awayLineupIDs -- 
        awayPositions -- 
        homeBenchIDs -- 
        homeBenchPos -- 
        awayBenchIDs -- 
        awayBenchPos -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1BID -- 
        sRunner2BID -- 
        sRunner3BID -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createGameSimulator2(self, sSimName, homeLineupIDs, homePositions, awayLineupIDs, awayPositions, homeBenchIDs, homeBenchPos, awayBenchIDs, awayBenchPos, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1BID, sRunner2BID, sRunner3BID, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createGameSimulator2.invoke(self, ((sSimName, homeLineupIDs, homePositions, awayLineupIDs, awayPositions, homeBenchIDs, homeBenchPos, awayBenchIDs, awayBenchPos, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1BID, sRunner2BID, sRunner3BID, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons), _ctx))

        """Creates a game simulator.
        Arguments:
        sSimName -- 
        homeLineupIDs -- 
        homePositions -- 
        awayLineupIDs -- 
        awayPositions -- 
        homeBenchIDs -- 
        homeBenchPos -- 
        awayBenchIDs -- 
        awayBenchPos -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1BID -- 
        sRunner2BID -- 
        sRunner3BID -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createGameSimulator2(self, sSimName, homeLineupIDs, homePositions, awayLineupIDs, awayPositions, homeBenchIDs, homeBenchPos, awayBenchIDs, awayBenchPos, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1BID, sRunner2BID, sRunner3BID, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createGameSimulator2.begin(self, ((sSimName, homeLineupIDs, homePositions, awayLineupIDs, awayPositions, homeBenchIDs, homeBenchPos, awayBenchIDs, awayBenchPos, nHomeBatter, nAwayBatter, nHomeScore, nAwayScore, inning, cTopBottom, nOuts, sRunner1BID, sRunner2BID, sRunner3BID, mgrMoves, nHomeSeason, nAwaySeason, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates a game simulator.
        Arguments:
        sSimName -- 
        homeLineupIDs -- 
        homePositions -- 
        awayLineupIDs -- 
        awayPositions -- 
        homeBenchIDs -- 
        homeBenchPos -- 
        awayBenchIDs -- 
        awayBenchPos -- 
        nHomeBatter -- 
        nAwayBatter -- 
        nHomeScore -- 
        nAwayScore -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        sRunner1BID -- 
        sRunner2BID -- 
        sRunner3BID -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        bUse2Seasons -- """
        def end_createGameSimulator2(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createGameSimulator2.end(self, _r)

        """Runs the GameSimulator with the given name.
        Arguments:
        sSimName -- 
        numOuts -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _ctx -- The request context for the invocation."""
        def simulateGame3(self, sSimName, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateGame3.invoke(self, ((sSimName, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _ctx))

        """Runs the GameSimulator with the given name.
        Arguments:
        sSimName -- 
        numOuts -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simulateGame3(self, sSimName, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateGame3.begin(self, ((sSimName, numOuts, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _response, _ex, _sent, _ctx))

        """Runs the GameSimulator with the given name.
        Arguments:
        sSimName -- 
        numOuts -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- """
        def end_simulateGame3(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simulateGame3.end(self, _r)

        """Creates and caches a series simulator between 2 teams.
        Arguments:
        sSimName -- 
        sHomeTeam -- 
        sAwayTeam -- 
        homeLineupVsR -- 
        homePosVsR -- 
        awayLineupVsR -- 
        awayPosVsR -- 
        homeLineupVsL -- 
        homePosVsL -- 
        awayLineupVsL -- 
        awayPosVsL -- 
        homeBenchVsR -- 
        homeBenchPosVsR -- 
        awayBenchVsR -- 
        awayBenchPosVsR -- 
        homeBenchVsL -- 
        homeBenchPosVsL -- 
        awayBenchVsL -- 
        awayBenchPosVsL -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        nHomeStatsSeason -- 
        nAwayStatsSeason -- 
        nSeries -- 
        numGames -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createSeriesSimulator(self, sSimName, sHomeTeam, sAwayTeam, homeLineupVsR, homePosVsR, awayLineupVsR, awayPosVsR, homeLineupVsL, homePosVsL, awayLineupVsL, awayPosVsL, homeBenchVsR, homeBenchPosVsR, awayBenchVsR, awayBenchPosVsR, homeBenchVsL, homeBenchPosVsL, awayBenchVsL, awayBenchPosVsL, mgrMoves, nHomeSeason, nAwaySeason, nHomeStatsSeason, nAwayStatsSeason, nSeries, numGames, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createSeriesSimulator.invoke(self, ((sSimName, sHomeTeam, sAwayTeam, homeLineupVsR, homePosVsR, awayLineupVsR, awayPosVsR, homeLineupVsL, homePosVsL, awayLineupVsL, awayPosVsL, homeBenchVsR, homeBenchPosVsR, awayBenchVsR, awayBenchPosVsR, homeBenchVsL, homeBenchPosVsL, awayBenchVsL, awayBenchPosVsL, mgrMoves, nHomeSeason, nAwaySeason, nHomeStatsSeason, nAwayStatsSeason, nSeries, numGames, bUse2Seasons), _ctx))

        """Creates and caches a series simulator between 2 teams.
        Arguments:
        sSimName -- 
        sHomeTeam -- 
        sAwayTeam -- 
        homeLineupVsR -- 
        homePosVsR -- 
        awayLineupVsR -- 
        awayPosVsR -- 
        homeLineupVsL -- 
        homePosVsL -- 
        awayLineupVsL -- 
        awayPosVsL -- 
        homeBenchVsR -- 
        homeBenchPosVsR -- 
        awayBenchVsR -- 
        awayBenchPosVsR -- 
        homeBenchVsL -- 
        homeBenchPosVsL -- 
        awayBenchVsL -- 
        awayBenchPosVsL -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        nHomeStatsSeason -- 
        nAwayStatsSeason -- 
        nSeries -- 
        numGames -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createSeriesSimulator(self, sSimName, sHomeTeam, sAwayTeam, homeLineupVsR, homePosVsR, awayLineupVsR, awayPosVsR, homeLineupVsL, homePosVsL, awayLineupVsL, awayPosVsL, homeBenchVsR, homeBenchPosVsR, awayBenchVsR, awayBenchPosVsR, homeBenchVsL, homeBenchPosVsL, awayBenchVsL, awayBenchPosVsL, mgrMoves, nHomeSeason, nAwaySeason, nHomeStatsSeason, nAwayStatsSeason, nSeries, numGames, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createSeriesSimulator.begin(self, ((sSimName, sHomeTeam, sAwayTeam, homeLineupVsR, homePosVsR, awayLineupVsR, awayPosVsR, homeLineupVsL, homePosVsL, awayLineupVsL, awayPosVsL, homeBenchVsR, homeBenchPosVsR, awayBenchVsR, awayBenchPosVsR, homeBenchVsL, homeBenchPosVsL, awayBenchVsL, awayBenchPosVsL, mgrMoves, nHomeSeason, nAwaySeason, nHomeStatsSeason, nAwayStatsSeason, nSeries, numGames, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates and caches a series simulator between 2 teams.
        Arguments:
        sSimName -- 
        sHomeTeam -- 
        sAwayTeam -- 
        homeLineupVsR -- 
        homePosVsR -- 
        awayLineupVsR -- 
        awayPosVsR -- 
        homeLineupVsL -- 
        homePosVsL -- 
        awayLineupVsL -- 
        awayPosVsL -- 
        homeBenchVsR -- 
        homeBenchPosVsR -- 
        awayBenchVsR -- 
        awayBenchPosVsR -- 
        homeBenchVsL -- 
        homeBenchPosVsL -- 
        awayBenchVsL -- 
        awayBenchPosVsL -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        nHomeStatsSeason -- 
        nAwayStatsSeason -- 
        nSeries -- 
        numGames -- 
        bUse2Seasons -- """
        def end_createSeriesSimulator(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createSeriesSimulator.end(self, _r)

        """Creates and caches a series simulator between 2 teams.
        Arguments:
        sSimName -- 
        sHomeTeamID -- 
        sAwayTeamID -- 
        homeLineupVsRIDs -- 
        homePosVsR -- 
        awayLineupVsRIDs -- 
        awayPosVsR -- 
        homeLineupVsLIDs -- 
        homePosVsL -- 
        awayLineupVsLIDs -- 
        awayPosVsL -- 
        homeBenchVsRIDs -- 
        homeBenchPosVsR -- 
        awayBenchVsRIDs -- 
        awayBenchPosVsR -- 
        homeBenchVsLIDs -- 
        homeBenchPosVsL -- 
        awayBenchVsLIDs -- 
        awayBenchPosVsL -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        nHomeStatsSeason -- 
        nAwayStatsSeason -- 
        nSeries -- 
        numGames -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createSeriesSimulator2(self, sSimName, sHomeTeamID, sAwayTeamID, homeLineupVsRIDs, homePosVsR, awayLineupVsRIDs, awayPosVsR, homeLineupVsLIDs, homePosVsL, awayLineupVsLIDs, awayPosVsL, homeBenchVsRIDs, homeBenchPosVsR, awayBenchVsRIDs, awayBenchPosVsR, homeBenchVsLIDs, homeBenchPosVsL, awayBenchVsLIDs, awayBenchPosVsL, mgrMoves, nHomeSeason, nAwaySeason, nHomeStatsSeason, nAwayStatsSeason, nSeries, numGames, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createSeriesSimulator2.invoke(self, ((sSimName, sHomeTeamID, sAwayTeamID, homeLineupVsRIDs, homePosVsR, awayLineupVsRIDs, awayPosVsR, homeLineupVsLIDs, homePosVsL, awayLineupVsLIDs, awayPosVsL, homeBenchVsRIDs, homeBenchPosVsR, awayBenchVsRIDs, awayBenchPosVsR, homeBenchVsLIDs, homeBenchPosVsL, awayBenchVsLIDs, awayBenchPosVsL, mgrMoves, nHomeSeason, nAwaySeason, nHomeStatsSeason, nAwayStatsSeason, nSeries, numGames, bUse2Seasons), _ctx))

        """Creates and caches a series simulator between 2 teams.
        Arguments:
        sSimName -- 
        sHomeTeamID -- 
        sAwayTeamID -- 
        homeLineupVsRIDs -- 
        homePosVsR -- 
        awayLineupVsRIDs -- 
        awayPosVsR -- 
        homeLineupVsLIDs -- 
        homePosVsL -- 
        awayLineupVsLIDs -- 
        awayPosVsL -- 
        homeBenchVsRIDs -- 
        homeBenchPosVsR -- 
        awayBenchVsRIDs -- 
        awayBenchPosVsR -- 
        homeBenchVsLIDs -- 
        homeBenchPosVsL -- 
        awayBenchVsLIDs -- 
        awayBenchPosVsL -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        nHomeStatsSeason -- 
        nAwayStatsSeason -- 
        nSeries -- 
        numGames -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createSeriesSimulator2(self, sSimName, sHomeTeamID, sAwayTeamID, homeLineupVsRIDs, homePosVsR, awayLineupVsRIDs, awayPosVsR, homeLineupVsLIDs, homePosVsL, awayLineupVsLIDs, awayPosVsL, homeBenchVsRIDs, homeBenchPosVsR, awayBenchVsRIDs, awayBenchPosVsR, homeBenchVsLIDs, homeBenchPosVsL, awayBenchVsLIDs, awayBenchPosVsL, mgrMoves, nHomeSeason, nAwaySeason, nHomeStatsSeason, nAwayStatsSeason, nSeries, numGames, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createSeriesSimulator2.begin(self, ((sSimName, sHomeTeamID, sAwayTeamID, homeLineupVsRIDs, homePosVsR, awayLineupVsRIDs, awayPosVsR, homeLineupVsLIDs, homePosVsL, awayLineupVsLIDs, awayPosVsL, homeBenchVsRIDs, homeBenchPosVsR, awayBenchVsRIDs, awayBenchPosVsR, homeBenchVsLIDs, homeBenchPosVsL, awayBenchVsLIDs, awayBenchPosVsL, mgrMoves, nHomeSeason, nAwaySeason, nHomeStatsSeason, nAwayStatsSeason, nSeries, numGames, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates and caches a series simulator between 2 teams.
        Arguments:
        sSimName -- 
        sHomeTeamID -- 
        sAwayTeamID -- 
        homeLineupVsRIDs -- 
        homePosVsR -- 
        awayLineupVsRIDs -- 
        awayPosVsR -- 
        homeLineupVsLIDs -- 
        homePosVsL -- 
        awayLineupVsLIDs -- 
        awayPosVsL -- 
        homeBenchVsRIDs -- 
        homeBenchPosVsR -- 
        awayBenchVsRIDs -- 
        awayBenchPosVsR -- 
        homeBenchVsLIDs -- 
        homeBenchPosVsL -- 
        awayBenchVsLIDs -- 
        awayBenchPosVsL -- 
        mgrMoves -- 
        nHomeSeason -- 
        nAwaySeason -- 
        nHomeStatsSeason -- 
        nAwayStatsSeason -- 
        nSeries -- 
        numGames -- 
        bUse2Seasons -- """
        def end_createSeriesSimulator2(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createSeriesSimulator2.end(self, _r)

        """Runs the SeriesSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _ctx -- The request context for the invocation."""
        def simulateSeries(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateSeries.invoke(self, ((sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _ctx))

        """Runs the SeriesSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simulateSeries(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateSeries.begin(self, ((sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _response, _ex, _sent, _ctx))

        """Runs the SeriesSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- """
        def end_simulateSeries(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simulateSeries.end(self, _r)

        """Sets the number of games and starts to override actual data.
        Arguments:
        sSimName -- 
        sSimType -- 
        sPlayer -- 
        sTeam -- 
        nSeries -- 
        first -- 
        last -- 
        nGames -- 
        nStarts -- 
        _ctx -- The request context for the invocation."""
        def setPlayerGames(self, sSimName, sSimType, sPlayer, sTeam, nSeries, first, last, nGames, nStarts, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_setPlayerGames.invoke(self, ((sSimName, sSimType, sPlayer, sTeam, nSeries, first, last, nGames, nStarts), _ctx))

        """Sets the number of games and starts to override actual data.
        Arguments:
        sSimName -- 
        sSimType -- 
        sPlayer -- 
        sTeam -- 
        nSeries -- 
        first -- 
        last -- 
        nGames -- 
        nStarts -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_setPlayerGames(self, sSimName, sSimType, sPlayer, sTeam, nSeries, first, last, nGames, nStarts, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_setPlayerGames.begin(self, ((sSimName, sSimType, sPlayer, sTeam, nSeries, first, last, nGames, nStarts), _response, _ex, _sent, _ctx))

        """Sets the number of games and starts to override actual data.
        Arguments:
        sSimName -- 
        sSimType -- 
        sPlayer -- 
        sTeam -- 
        nSeries -- 
        first -- 
        last -- 
        nGames -- 
        nStarts -- """
        def end_setPlayerGames(self, _r):
            return _M_HenryIce.AnalysisSvc._op_setPlayerGames.end(self, _r)

        """Returns the total number of game appearances for the given player by
        season and series for the team he was playing for on the given date.
        Arguments:
        sSimName -- 
        sSimType -- 
        sPlayer -- 
        sTeam -- 
        nSeries -- 
        asofDate -- 
        _ctx -- The request context for the invocation."""
        def getPlayerGames(self, sSimName, sSimType, sPlayer, sTeam, nSeries, asofDate, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_getPlayerGames.invoke(self, ((sSimName, sSimType, sPlayer, sTeam, nSeries, asofDate), _ctx))

        """Returns the total number of game appearances for the given player by
        season and series for the team he was playing for on the given date.
        Arguments:
        sSimName -- 
        sSimType -- 
        sPlayer -- 
        sTeam -- 
        nSeries -- 
        asofDate -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_getPlayerGames(self, sSimName, sSimType, sPlayer, sTeam, nSeries, asofDate, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_getPlayerGames.begin(self, ((sSimName, sSimType, sPlayer, sTeam, nSeries, asofDate), _response, _ex, _sent, _ctx))

        """Returns the total number of game appearances for the given player by
        season and series for the team he was playing for on the given date.
        Arguments:
        sSimName -- 
        sSimType -- 
        sPlayer -- 
        sTeam -- 
        nSeries -- 
        asofDate -- """
        def end_getPlayerGames(self, _r):
            return _M_HenryIce.AnalysisSvc._op_getPlayerGames.end(self, _r)

        """Returns the total number of games started for the given player by
        season and series for the team he was playing for on the given date.
        Arguments:
        sSimName -- 
        sSimType -- 
        sPlayer -- 
        sTeam -- 
        nSeries -- 
        asofdate -- 
        _ctx -- The request context for the invocation."""
        def getPlayerStarts(self, sSimName, sSimType, sPlayer, sTeam, nSeries, asofdate, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_getPlayerStarts.invoke(self, ((sSimName, sSimType, sPlayer, sTeam, nSeries, asofdate), _ctx))

        """Returns the total number of games started for the given player by
        season and series for the team he was playing for on the given date.
        Arguments:
        sSimName -- 
        sSimType -- 
        sPlayer -- 
        sTeam -- 
        nSeries -- 
        asofdate -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_getPlayerStarts(self, sSimName, sSimType, sPlayer, sTeam, nSeries, asofdate, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_getPlayerStarts.begin(self, ((sSimName, sSimType, sPlayer, sTeam, nSeries, asofdate), _response, _ex, _sent, _ctx))

        """Returns the total number of games started for the given player by
        season and series for the team he was playing for on the given date.
        Arguments:
        sSimName -- 
        sSimType -- 
        sPlayer -- 
        sTeam -- 
        nSeries -- 
        asofdate -- """
        def end_getPlayerStarts(self, _r):
            return _M_HenryIce.AnalysisSvc._op_getPlayerStarts.end(self, _r)

        """Creates and caches a season simulator for a given team.
        Arguments:
        sSimName -- 
        sTeam -- 
        lineupVsR -- 
        posVsR -- 
        lineupVsL -- 
        posVsL -- 
        benchVsR -- 
        benchPosVsR -- 
        benchVsL -- 
        benchPosVsL -- 
        mgrMoves -- 
        nTeamSeason -- 
        nOpponentSeason -- 
        nTeamStatsSeason -- 
        nOppStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createTeamSeasonSimulator(self, sSimName, sTeam, lineupVsR, posVsR, lineupVsL, posVsL, benchVsR, benchPosVsR, benchVsL, benchPosVsL, mgrMoves, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createTeamSeasonSimulator.invoke(self, ((sSimName, sTeam, lineupVsR, posVsR, lineupVsL, posVsL, benchVsR, benchPosVsR, benchVsL, benchPosVsL, mgrMoves, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons), _ctx))

        """Creates and caches a season simulator for a given team.
        Arguments:
        sSimName -- 
        sTeam -- 
        lineupVsR -- 
        posVsR -- 
        lineupVsL -- 
        posVsL -- 
        benchVsR -- 
        benchPosVsR -- 
        benchVsL -- 
        benchPosVsL -- 
        mgrMoves -- 
        nTeamSeason -- 
        nOpponentSeason -- 
        nTeamStatsSeason -- 
        nOppStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createTeamSeasonSimulator(self, sSimName, sTeam, lineupVsR, posVsR, lineupVsL, posVsL, benchVsR, benchPosVsR, benchVsL, benchPosVsL, mgrMoves, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createTeamSeasonSimulator.begin(self, ((sSimName, sTeam, lineupVsR, posVsR, lineupVsL, posVsL, benchVsR, benchPosVsR, benchVsL, benchPosVsL, mgrMoves, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates and caches a season simulator for a given team.
        Arguments:
        sSimName -- 
        sTeam -- 
        lineupVsR -- 
        posVsR -- 
        lineupVsL -- 
        posVsL -- 
        benchVsR -- 
        benchPosVsR -- 
        benchVsL -- 
        benchPosVsL -- 
        mgrMoves -- 
        nTeamSeason -- 
        nOpponentSeason -- 
        nTeamStatsSeason -- 
        nOppStatsSeason -- 
        nType -- 
        bUse2Seasons -- """
        def end_createTeamSeasonSimulator(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createTeamSeasonSimulator.end(self, _r)

        """Creates and caches a season simulator for a given team.
        Arguments:
        sSimName -- 
        sTeam -- 
        lineupVsR -- 
        posVsR -- 
        teamsVsR -- 
        lineupVsL -- 
        posVsL -- 
        teamsVsL -- 
        benchVsR -- 
        benchPosVsR -- 
        benchTeamsVsR -- 
        benchVsL -- 
        benchPosVsL -- 
        benchTeamsVsL -- 
        mgrMoves -- 
        nTeamSeason -- 
        nOpponentSeason -- 
        nTeamStatsSeason -- 
        nOppStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createTeamSeasonSimulator2(self, sSimName, sTeam, lineupVsR, posVsR, teamsVsR, lineupVsL, posVsL, teamsVsL, benchVsR, benchPosVsR, benchTeamsVsR, benchVsL, benchPosVsL, benchTeamsVsL, mgrMoves, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createTeamSeasonSimulator2.invoke(self, ((sSimName, sTeam, lineupVsR, posVsR, teamsVsR, lineupVsL, posVsL, teamsVsL, benchVsR, benchPosVsR, benchTeamsVsR, benchVsL, benchPosVsL, benchTeamsVsL, mgrMoves, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons), _ctx))

        """Creates and caches a season simulator for a given team.
        Arguments:
        sSimName -- 
        sTeam -- 
        lineupVsR -- 
        posVsR -- 
        teamsVsR -- 
        lineupVsL -- 
        posVsL -- 
        teamsVsL -- 
        benchVsR -- 
        benchPosVsR -- 
        benchTeamsVsR -- 
        benchVsL -- 
        benchPosVsL -- 
        benchTeamsVsL -- 
        mgrMoves -- 
        nTeamSeason -- 
        nOpponentSeason -- 
        nTeamStatsSeason -- 
        nOppStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createTeamSeasonSimulator2(self, sSimName, sTeam, lineupVsR, posVsR, teamsVsR, lineupVsL, posVsL, teamsVsL, benchVsR, benchPosVsR, benchTeamsVsR, benchVsL, benchPosVsL, benchTeamsVsL, mgrMoves, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createTeamSeasonSimulator2.begin(self, ((sSimName, sTeam, lineupVsR, posVsR, teamsVsR, lineupVsL, posVsL, teamsVsL, benchVsR, benchPosVsR, benchTeamsVsR, benchVsL, benchPosVsL, benchTeamsVsL, mgrMoves, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates and caches a season simulator for a given team.
        Arguments:
        sSimName -- 
        sTeam -- 
        lineupVsR -- 
        posVsR -- 
        teamsVsR -- 
        lineupVsL -- 
        posVsL -- 
        teamsVsL -- 
        benchVsR -- 
        benchPosVsR -- 
        benchTeamsVsR -- 
        benchVsL -- 
        benchPosVsL -- 
        benchTeamsVsL -- 
        mgrMoves -- 
        nTeamSeason -- 
        nOpponentSeason -- 
        nTeamStatsSeason -- 
        nOppStatsSeason -- 
        nType -- 
        bUse2Seasons -- """
        def end_createTeamSeasonSimulator2(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createTeamSeasonSimulator2.end(self, _r)

        """Creates and caches a season simulator for a given team.
        Arguments:
        sSimName -- 
        sTeam -- 
        nTeamSeason -- 
        nOpponentSeason -- 
        nTeamStatsSeason -- 
        nOppStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createTeamSeasonSimulator3(self, sSimName, sTeam, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createTeamSeasonSimulator3.invoke(self, ((sSimName, sTeam, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons), _ctx))

        """Creates and caches a season simulator for a given team.
        Arguments:
        sSimName -- 
        sTeam -- 
        nTeamSeason -- 
        nOpponentSeason -- 
        nTeamStatsSeason -- 
        nOppStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createTeamSeasonSimulator3(self, sSimName, sTeam, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createTeamSeasonSimulator3.begin(self, ((sSimName, sTeam, nTeamSeason, nOpponentSeason, nTeamStatsSeason, nOppStatsSeason, nType, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates and caches a season simulator for a given team.
        Arguments:
        sSimName -- 
        sTeam -- 
        nTeamSeason -- 
        nOpponentSeason -- 
        nTeamStatsSeason -- 
        nOppStatsSeason -- 
        nType -- 
        bUse2Seasons -- """
        def end_createTeamSeasonSimulator3(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createTeamSeasonSimulator3.end(self, _r)

        """Runs the TeamSeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _ctx -- The request context for the invocation."""
        def simulateTeamSeason(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateTeamSeason.invoke(self, ((sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _ctx))

        """Runs the TeamSeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simulateTeamSeason(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateTeamSeason.begin(self, ((sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _response, _ex, _sent, _ctx))

        """Runs the TeamSeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- """
        def end_simulateTeamSeason(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simulateTeamSeason.end(self, _r)

        """Creates and caches a season simulator for all teams.
        Arguments:
        sSimName -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createSeasonSimulator(self, sSimName, nSeason, nStatsSeason, nType, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createSeasonSimulator.invoke(self, ((sSimName, nSeason, nStatsSeason, nType, bUse2Seasons), _ctx))

        """Creates and caches a season simulator for all teams.
        Arguments:
        sSimName -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createSeasonSimulator(self, sSimName, nSeason, nStatsSeason, nType, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createSeasonSimulator.begin(self, ((sSimName, nSeason, nStatsSeason, nType, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates and caches a season simulator for all teams.
        Arguments:
        sSimName -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- """
        def end_createSeasonSimulator(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createSeasonSimulator.end(self, _r)

        """Runs the SeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _ctx -- The request context for the invocation."""
        def simulateSeason(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateSeason.invoke(self, ((sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _ctx))

        """Runs the SeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simulateSeason(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulateSeason.begin(self, ((sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _response, _ex, _sent, _ctx))

        """Runs the SeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- """
        def end_simulateSeason(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simulateSeason.end(self, _r)

        """Solves for team correls by fitting simulated and actual winning
        percentages using the SeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        maxIter -- 
        _ctx -- The request context for the invocation."""
        def solveTeamCorrels(self, sSimName, numPaths, nSeed, bPlayerVol, maxIter, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_solveTeamCorrels.invoke(self, ((sSimName, numPaths, nSeed, bPlayerVol, maxIter), _ctx))

        """Solves for team correls by fitting simulated and actual winning
        percentages using the SeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        maxIter -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_solveTeamCorrels(self, sSimName, numPaths, nSeed, bPlayerVol, maxIter, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_solveTeamCorrels.begin(self, ((sSimName, numPaths, nSeed, bPlayerVol, maxIter), _response, _ex, _sent, _ctx))

        """Solves for team correls by fitting simulated and actual winning
        percentages using the SeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        maxIter -- """
        def end_solveTeamCorrels(self, _r):
            return _M_HenryIce.AnalysisSvc._op_solveTeamCorrels.end(self, _r)

        """Creates and caches a post-season simulator for the given teams.
        Arguments:
        sSimName -- 
        alTeams -- 
        nlTeams -- 
        bALHome -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createPostSeasonSimulator(self, sSimName, alTeams, nlTeams, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createPostSeasonSimulator.invoke(self, ((sSimName, alTeams, nlTeams, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons), _ctx))

        """Creates and caches a post-season simulator for the given teams.
        Arguments:
        sSimName -- 
        alTeams -- 
        nlTeams -- 
        bALHome -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createPostSeasonSimulator(self, sSimName, alTeams, nlTeams, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createPostSeasonSimulator.begin(self, ((sSimName, alTeams, nlTeams, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates and caches a post-season simulator for the given teams.
        Arguments:
        sSimName -- 
        alTeams -- 
        nlTeams -- 
        bALHome -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- """
        def end_createPostSeasonSimulator(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createPostSeasonSimulator.end(self, _r)

        """Creates and caches a post-season simulator for the given teams.
        Arguments:
        sSimName -- 
        alTeamIDs -- 
        nlTeamIDs -- 
        bALHome -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createPostSeasonSimulator2(self, sSimName, alTeamIDs, nlTeamIDs, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createPostSeasonSimulator2.invoke(self, ((sSimName, alTeamIDs, nlTeamIDs, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons), _ctx))

        """Creates and caches a post-season simulator for the given teams.
        Arguments:
        sSimName -- 
        alTeamIDs -- 
        nlTeamIDs -- 
        bALHome -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createPostSeasonSimulator2(self, sSimName, alTeamIDs, nlTeamIDs, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createPostSeasonSimulator2.begin(self, ((sSimName, alTeamIDs, nlTeamIDs, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates and caches a post-season simulator for the given teams.
        Arguments:
        sSimName -- 
        alTeamIDs -- 
        nlTeamIDs -- 
        bALHome -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- """
        def end_createPostSeasonSimulator2(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createPostSeasonSimulator2.end(self, _r)

        """Creates and caches a post-season simulator based on the given regular
        season simulation.
        Arguments:
        sSimName -- 
        sSeasonSimName -- 
        bALHome -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _ctx -- The request context for the invocation."""
        def createPostSeasonSimulator3(self, sSimName, sSeasonSimName, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createPostSeasonSimulator3.invoke(self, ((sSimName, sSeasonSimName, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons), _ctx))

        """Creates and caches a post-season simulator based on the given regular
        season simulation.
        Arguments:
        sSimName -- 
        sSeasonSimName -- 
        bALHome -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_createPostSeasonSimulator3(self, sSimName, sSeasonSimName, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_createPostSeasonSimulator3.begin(self, ((sSimName, sSeasonSimName, bALHome, nSeason, nStatsSeason, nType, bUse2Seasons), _response, _ex, _sent, _ctx))

        """Creates and caches a post-season simulator based on the given regular
        season simulation.
        Arguments:
        sSimName -- 
        sSeasonSimName -- 
        bALHome -- 
        nSeason -- 
        nStatsSeason -- 
        nType -- 
        bUse2Seasons -- """
        def end_createPostSeasonSimulator3(self, _r):
            return _M_HenryIce.AnalysisSvc._op_createPostSeasonSimulator3.end(self, _r)

        """Runs the PostSeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _ctx -- The request context for the invocation."""
        def simulatePostSeason(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulatePostSeason.invoke(self, ((sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _ctx))

        """Runs the PostSeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simulatePostSeason(self, sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simulatePostSeason.begin(self, ((sSimName, numPaths, nSeed, bPlayerVol, bTeamCorrel, bRecordStats), _response, _ex, _sent, _ctx))

        """Runs the PostSeasonSimulator with the given name.
        Arguments:
        sSimName -- 
        numPaths -- 
        nSeed -- 
        bPlayerVol -- 
        bTeamCorrel -- 
        bRecordStats -- """
        def end_simulatePostSeason(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simulatePostSeason.end(self, _r)

        """Returns actual final season standings for the given season.
        Arguments:
        nSeason -- 
        bWPA -- 
        _ctx -- The request context for the invocation."""
        def seasonStandings(self, nSeason, bWPA, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_seasonStandings.invoke(self, ((nSeason, bWPA), _ctx))

        """Returns actual final season standings for the given season.
        Arguments:
        nSeason -- 
        bWPA -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_seasonStandings(self, nSeason, bWPA, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_seasonStandings.begin(self, ((nSeason, bWPA), _response, _ex, _sent, _ctx))

        """Returns actual final season standings for the given season.
        Arguments:
        nSeason -- 
        bWPA -- """
        def end_seasonStandings(self, _r):
            return _M_HenryIce.AnalysisSvc._op_seasonStandings.end(self, _r)

        """Returns post-season teams for the given season and league.
        Arguments:
        nSeason -- 
        bAL -- 
        _ctx -- The request context for the invocation."""
        def postSeasonTeams(self, nSeason, bAL, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_postSeasonTeams.invoke(self, ((nSeason, bAL), _ctx))

        """Returns post-season teams for the given season and league.
        Arguments:
        nSeason -- 
        bAL -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_postSeasonTeams(self, nSeason, bAL, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_postSeasonTeams.begin(self, ((nSeason, bAL), _response, _ex, _sent, _ctx))

        """Returns post-season teams for the given season and league.
        Arguments:
        nSeason -- 
        bAL -- """
        def end_postSeasonTeams(self, _r):
            return _M_HenryIce.AnalysisSvc._op_postSeasonTeams.end(self, _r)

        """Returns simulated wins for the home and away teams.
        Arguments:
        sSimName -- 
        _ctx -- The request context for the invocation."""
        def simGameWins(self, sSimName, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simGameWins.invoke(self, ((sSimName, ), _ctx))

        """Returns simulated wins for the home and away teams.
        Arguments:
        sSimName -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simGameWins(self, sSimName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simGameWins.begin(self, ((sSimName, ), _response, _ex, _sent, _ctx))

        """Returns simulated wins for the home and away teams.
        Arguments:
        sSimName -- """
        def end_simGameWins(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simGameWins.end(self, _r)

        """Returns simulated average home and away score.
        Arguments:
        sSimName -- 
        _ctx -- The request context for the invocation."""
        def simGameAvgScore(self, sSimName, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simGameAvgScore.invoke(self, ((sSimName, ), _ctx))

        """Returns simulated average home and away score.
        Arguments:
        sSimName -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simGameAvgScore(self, sSimName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simGameAvgScore.begin(self, ((sSimName, ), _response, _ex, _sent, _ctx))

        """Returns simulated average home and away score.
        Arguments:
        sSimName -- """
        def end_simGameAvgScore(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simGameAvgScore.end(self, _r)

        """Returns simulated score (runs) distribution for the home or
        away team.
        Arguments:
        sSimName -- 
        bHome -- 
        _ctx -- The request context for the invocation."""
        def simGameScoreDistribution(self, sSimName, bHome, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simGameScoreDistribution.invoke(self, ((sSimName, bHome), _ctx))

        """Returns simulated score (runs) distribution for the home or
        away team.
        Arguments:
        sSimName -- 
        bHome -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simGameScoreDistribution(self, sSimName, bHome, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simGameScoreDistribution.begin(self, ((sSimName, bHome), _response, _ex, _sent, _ctx))

        """Returns simulated score (runs) distribution for the home or
        away team.
        Arguments:
        sSimName -- 
        bHome -- """
        def end_simGameScoreDistribution(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simGameScoreDistribution.end(self, _r)

        """Returns simulated series wins for the home and away teams.
        Arguments:
        sSimName -- 
        _ctx -- The request context for the invocation."""
        def simSeriesWins(self, sSimName, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeriesWins.invoke(self, ((sSimName, ), _ctx))

        """Returns simulated series wins for the home and away teams.
        Arguments:
        sSimName -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSeriesWins(self, sSimName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeriesWins.begin(self, ((sSimName, ), _response, _ex, _sent, _ctx))

        """Returns simulated series wins for the home and away teams.
        Arguments:
        sSimName -- """
        def end_simSeriesWins(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSeriesWins.end(self, _r)

        """Returns simulated average game wins for the home and away teams.
        Arguments:
        sSimName -- 
        _ctx -- The request context for the invocation."""
        def simSeriesAvgGameWins(self, sSimName, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeriesAvgGameWins.invoke(self, ((sSimName, ), _ctx))

        """Returns simulated average game wins for the home and away teams.
        Arguments:
        sSimName -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSeriesAvgGameWins(self, sSimName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeriesAvgGameWins.begin(self, ((sSimName, ), _response, _ex, _sent, _ctx))

        """Returns simulated average game wins for the home and away teams.
        Arguments:
        sSimName -- """
        def end_simSeriesAvgGameWins(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSeriesAvgGameWins.end(self, _r)

        """Returns simulated game wins distribution for the home or away team.
        Arguments:
        sSimName -- 
        bHome -- 
        _ctx -- The request context for the invocation."""
        def simSeriesGameWinDistribution(self, sSimName, bHome, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeriesGameWinDistribution.invoke(self, ((sSimName, bHome), _ctx))

        """Returns simulated game wins distribution for the home or away team.
        Arguments:
        sSimName -- 
        bHome -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSeriesGameWinDistribution(self, sSimName, bHome, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeriesGameWinDistribution.begin(self, ((sSimName, bHome), _response, _ex, _sent, _ctx))

        """Returns simulated game wins distribution for the home or away team.
        Arguments:
        sSimName -- 
        bHome -- """
        def end_simSeriesGameWinDistribution(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSeriesGameWinDistribution.end(self, _r)

        """Returns simulated average wins and losses for the team.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- 
        _ctx -- The request context for the invocation."""
        def simSeasonWins(self, sSimName, cSimType, sTeam, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeasonWins.invoke(self, ((sSimName, cSimType, sTeam), _ctx))

        """Returns simulated average wins and losses for the team.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSeasonWins(self, sSimName, cSimType, sTeam, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeasonWins.begin(self, ((sSimName, cSimType, sTeam), _response, _ex, _sent, _ctx))

        """Returns simulated average wins and losses for the team.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- """
        def end_simSeasonWins(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSeasonWins.end(self, _r)

        """Returns simulated expected season standings.
        Arguments:
        sSimName -- 
        _ctx -- The request context for the invocation."""
        def simSeasonStandings(self, sSimName, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeasonStandings.invoke(self, ((sSimName, ), _ctx))

        """Returns simulated expected season standings.
        Arguments:
        sSimName -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSeasonStandings(self, sSimName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeasonStandings.begin(self, ((sSimName, ), _response, _ex, _sent, _ctx))

        """Returns simulated expected season standings.
        Arguments:
        sSimName -- """
        def end_simSeasonStandings(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSeasonStandings.end(self, _r)

        """Returns simulated win distribution for the team.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- 
        _ctx -- The request context for the invocation."""
        def simSeasonWinDistribution(self, sSimName, cSimType, sTeam, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeasonWinDistribution.invoke(self, ((sSimName, cSimType, sTeam), _ctx))

        """Returns simulated win distribution for the team.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSeasonWinDistribution(self, sSimName, cSimType, sTeam, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSeasonWinDistribution.begin(self, ((sSimName, cSimType, sTeam), _response, _ex, _sent, _ctx))

        """Returns simulated win distribution for the team.
        Arguments:
        sSimName -- 
        cSimType -- 
        sTeam -- """
        def end_simSeasonWinDistribution(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSeasonWinDistribution.end(self, _r)

        """Returns simulated post-season results.
        Arguments:
        sSimName -- 
        _ctx -- The request context for the invocation."""
        def simPostSeasonResults(self, sSimName, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simPostSeasonResults.invoke(self, ((sSimName, ), _ctx))

        """Returns simulated post-season results.
        Arguments:
        sSimName -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simPostSeasonResults(self, sSimName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simPostSeasonResults.begin(self, ((sSimName, ), _response, _ex, _sent, _ctx))

        """Returns simulated post-season results.
        Arguments:
        sSimName -- """
        def end_simPostSeasonResults(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simPostSeasonResults.end(self, _r)

        """Returns simulated batting stats for the player by position.
        Arguments:
        sSimName -- 
        cSimType -- 
        sBatter -- 
        sTeam -- 
        nPos -- 
        _ctx -- The request context for the invocation."""
        def simBattingStats(self, sSimName, cSimType, sBatter, sTeam, nPos, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simBattingStats.invoke(self, ((sSimName, cSimType, sBatter, sTeam, nPos), _ctx))

        """Returns simulated batting stats for the player by position.
        Arguments:
        sSimName -- 
        cSimType -- 
        sBatter -- 
        sTeam -- 
        nPos -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simBattingStats(self, sSimName, cSimType, sBatter, sTeam, nPos, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simBattingStats.begin(self, ((sSimName, cSimType, sBatter, sTeam, nPos), _response, _ex, _sent, _ctx))

        """Returns simulated batting stats for the player by position.
        Arguments:
        sSimName -- 
        cSimType -- 
        sBatter -- 
        sTeam -- 
        nPos -- """
        def end_simBattingStats(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simBattingStats.end(self, _r)

        """Returns simulated fielding stats for the player by position.
        Arguments:
        sSimName -- 
        cSimType -- 
        sFielder -- 
        sTeam -- 
        nPos -- 
        _ctx -- The request context for the invocation."""
        def simFieldingStats(self, sSimName, cSimType, sFielder, sTeam, nPos, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simFieldingStats.invoke(self, ((sSimName, cSimType, sFielder, sTeam, nPos), _ctx))

        """Returns simulated fielding stats for the player by position.
        Arguments:
        sSimName -- 
        cSimType -- 
        sFielder -- 
        sTeam -- 
        nPos -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simFieldingStats(self, sSimName, cSimType, sFielder, sTeam, nPos, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simFieldingStats.begin(self, ((sSimName, cSimType, sFielder, sTeam, nPos), _response, _ex, _sent, _ctx))

        """Returns simulated fielding stats for the player by position.
        Arguments:
        sSimName -- 
        cSimType -- 
        sFielder -- 
        sTeam -- 
        nPos -- """
        def end_simFieldingStats(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simFieldingStats.end(self, _r)

        """Returns simulated pitching stats for the player.
        Arguments:
        sSimName -- 
        cSimType -- 
        sPitcher -- 
        sTeam -- 
        _ctx -- The request context for the invocation."""
        def simPitchingStats(self, sSimName, cSimType, sPitcher, sTeam, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simPitchingStats.invoke(self, ((sSimName, cSimType, sPitcher, sTeam), _ctx))

        """Returns simulated pitching stats for the player.
        Arguments:
        sSimName -- 
        cSimType -- 
        sPitcher -- 
        sTeam -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simPitchingStats(self, sSimName, cSimType, sPitcher, sTeam, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simPitchingStats.begin(self, ((sSimName, cSimType, sPitcher, sTeam), _response, _ex, _sent, _ctx))

        """Returns simulated pitching stats for the player.
        Arguments:
        sSimName -- 
        cSimType -- 
        sPitcher -- 
        sTeam -- """
        def end_simPitchingStats(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simPitchingStats.end(self, _r)

        """Returns simulated batting stats for all players or teams sorted
        by a chosen metric.
        Arguments:
        sSimName -- 
        cSimType -- 
        bTeam -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- 
        _ctx -- The request context for the invocation."""
        def simSortBattingStats(self, sSimName, cSimType, bTeam, sSortMetric, minPA, bDescOrder, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSortBattingStats.invoke(self, ((sSimName, cSimType, bTeam, sSortMetric, minPA, bDescOrder), _ctx))

        """Returns simulated batting stats for all players or teams sorted
        by a chosen metric.
        Arguments:
        sSimName -- 
        cSimType -- 
        bTeam -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSortBattingStats(self, sSimName, cSimType, bTeam, sSortMetric, minPA, bDescOrder, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSortBattingStats.begin(self, ((sSimName, cSimType, bTeam, sSortMetric, minPA, bDescOrder), _response, _ex, _sent, _ctx))

        """Returns simulated batting stats for all players or teams sorted
        by a chosen metric.
        Arguments:
        sSimName -- 
        cSimType -- 
        bTeam -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- """
        def end_simSortBattingStats(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSortBattingStats.end(self, _r)

        """Returns simulated fielding stats for all players or teams sorted
        by a chosen metric.
        Arguments:
        sSimName -- 
        cSimType -- 
        bTeam -- 
        sSortMetric -- 
        minCH -- 
        bDescOrder -- 
        _ctx -- The request context for the invocation."""
        def simSortFieldingStats(self, sSimName, cSimType, bTeam, sSortMetric, minCH, bDescOrder, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSortFieldingStats.invoke(self, ((sSimName, cSimType, bTeam, sSortMetric, minCH, bDescOrder), _ctx))

        """Returns simulated fielding stats for all players or teams sorted
        by a chosen metric.
        Arguments:
        sSimName -- 
        cSimType -- 
        bTeam -- 
        sSortMetric -- 
        minCH -- 
        bDescOrder -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSortFieldingStats(self, sSimName, cSimType, bTeam, sSortMetric, minCH, bDescOrder, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSortFieldingStats.begin(self, ((sSimName, cSimType, bTeam, sSortMetric, minCH, bDescOrder), _response, _ex, _sent, _ctx))

        """Returns simulated fielding stats for all players or teams sorted
        by a chosen metric.
        Arguments:
        sSimName -- 
        cSimType -- 
        bTeam -- 
        sSortMetric -- 
        minCH -- 
        bDescOrder -- """
        def end_simSortFieldingStats(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSortFieldingStats.end(self, _r)

        """Returns simulated pitching stats for all players or teams sorted
        by a chosen metric.
        Arguments:
        sSimName -- 
        cSimType -- 
        bTeam -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- 
        _ctx -- The request context for the invocation."""
        def simSortPitchingStats(self, sSimName, cSimType, bTeam, sSortMetric, minBF, bDescOrder, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSortPitchingStats.invoke(self, ((sSimName, cSimType, bTeam, sSortMetric, minBF, bDescOrder), _ctx))

        """Returns simulated pitching stats for all players or teams sorted
        by a chosen metric.
        Arguments:
        sSimName -- 
        cSimType -- 
        bTeam -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSortPitchingStats(self, sSimName, cSimType, bTeam, sSortMetric, minBF, bDescOrder, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSortPitchingStats.begin(self, ((sSimName, cSimType, bTeam, sSortMetric, minBF, bDescOrder), _response, _ex, _sent, _ctx))

        """Returns simulated pitching stats for all players or teams sorted
        by a chosen metric.
        Arguments:
        sSimName -- 
        cSimType -- 
        bTeam -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- """
        def end_simSortPitchingStats(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSortPitchingStats.end(self, _r)

        """Calculates total return stats for batters.
        Arguments:
        nStartSeason -- 
        nEndSeason -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- 
        _ctx -- The request context for the invocation."""
        def simSortBattingReturn(self, nStartSeason, nEndSeason, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sSortMetric, minPA, bDescOrder, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSortBattingReturn.invoke(self, ((nStartSeason, nEndSeason, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sSortMetric, minPA, bDescOrder), _ctx))

        """Calculates total return stats for batters.
        Arguments:
        nStartSeason -- 
        nEndSeason -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSortBattingReturn(self, nStartSeason, nEndSeason, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sSortMetric, minPA, bDescOrder, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSortBattingReturn.begin(self, ((nStartSeason, nEndSeason, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sSortMetric, minPA, bDescOrder), _response, _ex, _sent, _ctx))

        """Calculates total return stats for batters.
        Arguments:
        nStartSeason -- 
        nEndSeason -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- """
        def end_simSortBattingReturn(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSortBattingReturn.end(self, _r)

        """Calculates total return stats for pitchers.
        Arguments:
        nStartSeason -- 
        nEndSeason -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- 
        _ctx -- The request context for the invocation."""
        def simSortPitchingReturn(self, nStartSeason, nEndSeason, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sSortMetric, minBF, bDescOrder, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSortPitchingReturn.invoke(self, ((nStartSeason, nEndSeason, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sSortMetric, minBF, bDescOrder), _ctx))

        """Calculates total return stats for pitchers.
        Arguments:
        nStartSeason -- 
        nEndSeason -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_simSortPitchingReturn(self, nStartSeason, nEndSeason, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sSortMetric, minBF, bDescOrder, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_simSortPitchingReturn.begin(self, ((nStartSeason, nEndSeason, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sSortMetric, minBF, bDescOrder), _response, _ex, _sent, _ctx))

        """Calculates total return stats for pitchers.
        Arguments:
        nStartSeason -- 
        nEndSeason -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- """
        def end_simSortPitchingReturn(self, _r):
            return _M_HenryIce.AnalysisSvc._op_simSortPitchingReturn.end(self, _r)

        """Determines alternative players for a team based on return.
        Arguments:
        sTeam -- 
        nSeason -- 
        numHistSeasons -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sBattingReturnStat -- 
        sPitchingReturnStat -- 
        cProjType -- 
        minSeasons -- 
        minPA -- 
        minBF -- 
        sBattingCompStat -- 
        sPitchingCompStat -- 
        battingCompDiff -- 
        pitchingCompDiff -- 
        bAllPlayers -- 
        maxAltPlayers -- 
        _ctx -- The request context for the invocation."""
        def backtestTeamReturn(self, sTeam, nSeason, numHistSeasons, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sBattingReturnStat, sPitchingReturnStat, cProjType, minSeasons, minPA, minBF, sBattingCompStat, sPitchingCompStat, battingCompDiff, pitchingCompDiff, bAllPlayers, maxAltPlayers, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_backtestTeamReturn.invoke(self, ((sTeam, nSeason, numHistSeasons, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sBattingReturnStat, sPitchingReturnStat, cProjType, minSeasons, minPA, minBF, sBattingCompStat, sPitchingCompStat, battingCompDiff, pitchingCompDiff, bAllPlayers, maxAltPlayers), _ctx))

        """Determines alternative players for a team based on return.
        Arguments:
        sTeam -- 
        nSeason -- 
        numHistSeasons -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sBattingReturnStat -- 
        sPitchingReturnStat -- 
        cProjType -- 
        minSeasons -- 
        minPA -- 
        minBF -- 
        sBattingCompStat -- 
        sPitchingCompStat -- 
        battingCompDiff -- 
        pitchingCompDiff -- 
        bAllPlayers -- 
        maxAltPlayers -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_backtestTeamReturn(self, sTeam, nSeason, numHistSeasons, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sBattingReturnStat, sPitchingReturnStat, cProjType, minSeasons, minPA, minBF, sBattingCompStat, sPitchingCompStat, battingCompDiff, pitchingCompDiff, bAllPlayers, maxAltPlayers, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_backtestTeamReturn.begin(self, ((sTeam, nSeason, numHistSeasons, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sBattingReturnStat, sPitchingReturnStat, cProjType, minSeasons, minPA, minBF, sBattingCompStat, sPitchingCompStat, battingCompDiff, pitchingCompDiff, bAllPlayers, maxAltPlayers), _response, _ex, _sent, _ctx))

        """Determines alternative players for a team based on return.
        Arguments:
        sTeam -- 
        nSeason -- 
        numHistSeasons -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sBattingReturnStat -- 
        sPitchingReturnStat -- 
        cProjType -- 
        minSeasons -- 
        minPA -- 
        minBF -- 
        sBattingCompStat -- 
        sPitchingCompStat -- 
        battingCompDiff -- 
        pitchingCompDiff -- 
        bAllPlayers -- 
        maxAltPlayers -- """
        def end_backtestTeamReturn(self, _r):
            return _M_HenryIce.AnalysisSvc._op_backtestTeamReturn.end(self, _r)

        """Backtests return-based player decisions for all teams over a range of seasons.
        Arguments:
        nStartSeason -- 
        nEndSeason -- 
        numHistSeasons -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sBattingReturnStat -- 
        sPitchingReturnStat -- 
        cProjType -- 
        minSeasons -- 
        minPA -- 
        minBF -- 
        sBattingCompStat -- 
        sPitchingCompStat -- 
        battingCompDiff -- 
        pitchingCompDiff -- 
        bAllPlayers -- 
        _ctx -- The request context for the invocation."""
        def backtestReturn(self, nStartSeason, nEndSeason, numHistSeasons, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sBattingReturnStat, sPitchingReturnStat, cProjType, minSeasons, minPA, minBF, sBattingCompStat, sPitchingCompStat, battingCompDiff, pitchingCompDiff, bAllPlayers, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_backtestReturn.invoke(self, ((nStartSeason, nEndSeason, numHistSeasons, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sBattingReturnStat, sPitchingReturnStat, cProjType, minSeasons, minPA, minBF, sBattingCompStat, sPitchingCompStat, battingCompDiff, pitchingCompDiff, bAllPlayers), _ctx))

        """Backtests return-based player decisions for all teams over a range of seasons.
        Arguments:
        nStartSeason -- 
        nEndSeason -- 
        numHistSeasons -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sBattingReturnStat -- 
        sPitchingReturnStat -- 
        cProjType -- 
        minSeasons -- 
        minPA -- 
        minBF -- 
        sBattingCompStat -- 
        sPitchingCompStat -- 
        battingCompDiff -- 
        pitchingCompDiff -- 
        bAllPlayers -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_backtestReturn(self, nStartSeason, nEndSeason, numHistSeasons, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sBattingReturnStat, sPitchingReturnStat, cProjType, minSeasons, minPA, minBF, sBattingCompStat, sPitchingCompStat, battingCompDiff, pitchingCompDiff, bAllPlayers, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_backtestReturn.begin(self, ((nStartSeason, nEndSeason, numHistSeasons, nType, bTeamCorrel, bPlayerVol, bUse2Seasons, numPaths, sBattingReturnStat, sPitchingReturnStat, cProjType, minSeasons, minPA, minBF, sBattingCompStat, sPitchingCompStat, battingCompDiff, pitchingCompDiff, bAllPlayers), _response, _ex, _sent, _ctx))

        """Backtests return-based player decisions for all teams over a range of seasons.
        Arguments:
        nStartSeason -- 
        nEndSeason -- 
        numHistSeasons -- 
        nType -- 
        bTeamCorrel -- 
        bPlayerVol -- 
        bUse2Seasons -- 
        numPaths -- 
        sBattingReturnStat -- 
        sPitchingReturnStat -- 
        cProjType -- 
        minSeasons -- 
        minPA -- 
        minBF -- 
        sBattingCompStat -- 
        sPitchingCompStat -- 
        battingCompDiff -- 
        pitchingCompDiff -- 
        bAllPlayers -- """
        def end_backtestReturn(self, _r):
            return _M_HenryIce.AnalysisSvc._op_backtestReturn.end(self, _r)

        """Saves the simulator and results to a separate database.
        Arguments:
        sSimName -- 
        cSimType -- 
        _ctx -- The request context for the invocation."""
        def saveSimulator(self, sSimName, cSimType, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_saveSimulator.invoke(self, ((sSimName, cSimType), _ctx))

        """Saves the simulator and results to a separate database.
        Arguments:
        sSimName -- 
        cSimType -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_saveSimulator(self, sSimName, cSimType, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_saveSimulator.begin(self, ((sSimName, cSimType), _response, _ex, _sent, _ctx))

        """Saves the simulator and results to a separate database.
        Arguments:
        sSimName -- 
        cSimType -- """
        def end_saveSimulator(self, _r):
            return _M_HenryIce.AnalysisSvc._op_saveSimulator.end(self, _r)

        """Clears all simulators from cache but does not delete from database.
        Arguments:
        _ctx -- The request context for the invocation."""
        def clearSimulators(self, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_clearSimulators.invoke(self, ((), _ctx))

        """Clears all simulators from cache but does not delete from database.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_clearSimulators(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.AnalysisSvc._op_clearSimulators.begin(self, ((), _response, _ex, _sent, _ctx))

        """Clears all simulators from cache but does not delete from database.
        Arguments:"""
        def end_clearSimulators(self, _r):
            return _M_HenryIce.AnalysisSvc._op_clearSimulators.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_HenryIce.AnalysisSvcPrx.ice_checkedCast(proxy, '::HenryIce::AnalysisSvc', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_HenryIce.AnalysisSvcPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::HenryIce::AnalysisSvc'
        ice_staticId = staticmethod(ice_staticId)

    _M_HenryIce._t_AnalysisSvcPrx = IcePy.defineProxy('::HenryIce::AnalysisSvc', AnalysisSvcPrx)

    _M_HenryIce._t_AnalysisSvc = IcePy.defineClass('::HenryIce::AnalysisSvc', AnalysisSvc, -1, (), True, False, None, (), ())
    AnalysisSvc._ice_type = _M_HenryIce._t_AnalysisSvc

    AnalysisSvc._op_setThreadPoolSize = IcePy.Operation('setThreadPoolSize', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    AnalysisSvc._op_battingProbsLabels = IcePy.Operation('battingProbsLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    AnalysisSvc._op_pitchingProbsLabels = IcePy.Operation('pitchingProbsLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    AnalysisSvc._op_fieldingProbsLabels = IcePy.Operation('fieldingProbsLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    AnalysisSvc._op_covarMatrixLabels = IcePy.Operation('covarMatrixLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    AnalysisSvc._op_battingProbs = IcePy.Operation('battingProbs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_fieldingProbs = IcePy.Operation('fieldingProbs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_pitchingProbs = IcePy.Operation('pitchingProbs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_condBattingProbs = IcePy.Operation('condBattingProbs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_condBattedBallProbs = IcePy.Operation('condBattedBallProbs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_DoubleMatrix, False, 0), ())
    AnalysisSvc._op_condHitProbs = IcePy.Operation('condHitProbs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_DoubleMatrix, False, 0), ())
    AnalysisSvc._op_condBaseRunningProbs = IcePy.Operation('condBaseRunningProbs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_DoubleMatrix, False, 0), ())
    AnalysisSvc._op_batterCovarMatrix = IcePy.Operation('batterCovarMatrix', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleMatrix, False, 0), ())
    AnalysisSvc._op_pitcherCovarMatrix = IcePy.Operation('pitcherCovarMatrix', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleMatrix, False, 0), ())
    AnalysisSvc._op_simulateBatter = IcePy.Operation('simulateBatter', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_double, False, 0), ())
    AnalysisSvc._op_staticLineup = IcePy.Operation('staticLineup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_staticBench = IcePy.Operation('staticBench', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_dynamicLineup = IcePy.Operation('dynamicLineup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_Date, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_dynamicBench = IcePy.Operation('dynamicBench', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_Date, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_teamBatters = IcePy.Operation('teamBatters', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_Date, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    AnalysisSvc._op_teamPitchers = IcePy.Operation('teamPitchers', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_Date, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    AnalysisSvc._op_mgrMoveLabels = IcePy.Operation('mgrMoveLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    AnalysisSvc._op_defaultMgrMoves = IcePy.Operation('defaultMgrMoves', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_Date, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_mgrMoves = IcePy.Operation('mgrMoves', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_setTeamCorrel = IcePy.Operation('setTeamCorrel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_double, False, 0)), (), None, ())
    AnalysisSvc._op_getTeamCorrel = IcePy.Operation('getTeamCorrel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_double, False, 0), ())
    AnalysisSvc._op_getTeamCorrels = IcePy.Operation('getTeamCorrels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_getTeamCorrels2 = IcePy.Operation('getTeamCorrels2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_HenryIce._t_StringVector, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_simulateGame = IcePy.Operation('simulateGame', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringMatrix, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_simulateGame2 = IcePy.Operation('simulateGame2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringMatrix, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_createGameSimulator = IcePy.Operation('createGameSimulator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringMatrix, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_createGameSimulator2 = IcePy.Operation('createGameSimulator2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringMatrix, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_simulateGame3 = IcePy.Operation('simulateGame3', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_createSeriesSimulator = IcePy.Operation('createSeriesSimulator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringMatrix, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_createSeriesSimulator2 = IcePy.Operation('createSeriesSimulator2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringMatrix, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_simulateSeries = IcePy.Operation('simulateSeries', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_setPlayerGames = IcePy.Operation('setPlayerGames', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), _M_HenryIce._t_Date, False, 0), ((), _M_HenryIce._t_Date, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    AnalysisSvc._op_getPlayerGames = IcePy.Operation('getPlayerGames', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), _M_HenryIce._t_Date, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    AnalysisSvc._op_getPlayerStarts = IcePy.Operation('getPlayerStarts', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), _M_HenryIce._t_Date, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    AnalysisSvc._op_createTeamSeasonSimulator = IcePy.Operation('createTeamSeasonSimulator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringMatrix, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_createTeamSeasonSimulator2 = IcePy.Operation('createTeamSeasonSimulator2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntMatrix, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringMatrix, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_createTeamSeasonSimulator3 = IcePy.Operation('createTeamSeasonSimulator3', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_simulateTeamSeason = IcePy.Operation('simulateTeamSeason', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_createSeasonSimulator = IcePy.Operation('createSeasonSimulator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_simulateSeason = IcePy.Operation('simulateSeason', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_solveTeamCorrels = IcePy.Operation('solveTeamCorrels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    AnalysisSvc._op_createPostSeasonSimulator = IcePy.Operation('createPostSeasonSimulator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_createPostSeasonSimulator2 = IcePy.Operation('createPostSeasonSimulator2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_createPostSeasonSimulator3 = IcePy.Operation('createPostSeasonSimulator3', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_simulatePostSeason = IcePy.Operation('simulatePostSeason', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    AnalysisSvc._op_seasonStandings = IcePy.Operation('seasonStandings', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_postSeasonTeams = IcePy.Operation('postSeasonTeams', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    AnalysisSvc._op_simGameWins = IcePy.Operation('simGameWins', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_HenryIce._t_IntVector, False, 0), ())
    AnalysisSvc._op_simGameAvgScore = IcePy.Operation('simGameAvgScore', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_simGameScoreDistribution = IcePy.Operation('simGameScoreDistribution', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    AnalysisSvc._op_simSeriesWins = IcePy.Operation('simSeriesWins', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_HenryIce._t_IntVector, False, 0), ())
    AnalysisSvc._op_simSeriesAvgGameWins = IcePy.Operation('simSeriesAvgGameWins', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_simSeriesGameWinDistribution = IcePy.Operation('simSeriesGameWinDistribution', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    AnalysisSvc._op_simSeasonWins = IcePy.Operation('simSeasonWins', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_simSeasonStandings = IcePy.Operation('simSeasonStandings', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_simSeasonWinDistribution = IcePy.Operation('simSeasonWinDistribution', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    AnalysisSvc._op_simPostSeasonResults = IcePy.Operation('simPostSeasonResults', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_simBattingStats = IcePy.Operation('simBattingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_simFieldingStats = IcePy.Operation('simFieldingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_simPitchingStats = IcePy.Operation('simPitchingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    AnalysisSvc._op_simSortBattingStats = IcePy.Operation('simSortBattingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_simSortFieldingStats = IcePy.Operation('simSortFieldingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_simSortPitchingStats = IcePy.Operation('simSortPitchingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_simSortBattingReturn = IcePy.Operation('simSortBattingReturn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_simSortPitchingReturn = IcePy.Operation('simSortPitchingReturn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_backtestTeamReturn = IcePy.Operation('backtestTeamReturn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_backtestReturn = IcePy.Operation('backtestReturn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    AnalysisSvc._op_saveSimulator = IcePy.Operation('saveSimulator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    AnalysisSvc._op_clearSimulators = IcePy.Operation('clearSimulators', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_HenryIce.AnalysisSvc = AnalysisSvc
    del AnalysisSvc

    _M_HenryIce.AnalysisSvcPrx = AnalysisSvcPrx
    del AnalysisSvcPrx

# End of module HenryIce
