# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `Types.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module HenryIce
_M_HenryIce = Ice.openModule('HenryIce')
__name__ = 'HenryIce'

if '_t_StringVector' not in _M_HenryIce.__dict__:
    _M_HenryIce._t_StringVector = IcePy.defineSequence('::HenryIce::StringVector', (), IcePy._t_string)

if '_t_IntVector' not in _M_HenryIce.__dict__:
    _M_HenryIce._t_IntVector = IcePy.defineSequence('::HenryIce::IntVector', (), IcePy._t_int)

if '_t_DoubleVector' not in _M_HenryIce.__dict__:
    _M_HenryIce._t_DoubleVector = IcePy.defineSequence('::HenryIce::DoubleVector', (), IcePy._t_double)

if '_t_BoolVector' not in _M_HenryIce.__dict__:
    _M_HenryIce._t_BoolVector = IcePy.defineSequence('::HenryIce::BoolVector', (), IcePy._t_bool)

if '_t_StringMatrix' not in _M_HenryIce.__dict__:
    _M_HenryIce._t_StringMatrix = IcePy.defineSequence('::HenryIce::StringMatrix', (), _M_HenryIce._t_StringVector)

if '_t_IntMatrix' not in _M_HenryIce.__dict__:
    _M_HenryIce._t_IntMatrix = IcePy.defineSequence('::HenryIce::IntMatrix', (), _M_HenryIce._t_IntVector)

if '_t_DoubleMatrix' not in _M_HenryIce.__dict__:
    _M_HenryIce._t_DoubleMatrix = IcePy.defineSequence('::HenryIce::DoubleMatrix', (), _M_HenryIce._t_DoubleVector)

if '_t_StringStringMap' not in _M_HenryIce.__dict__:
    _M_HenryIce._t_StringStringMap = IcePy.defineDictionary('::HenryIce::StringStringMap', (), IcePy._t_string, IcePy._t_string)

if 'Date' not in _M_HenryIce.__dict__:
    _M_HenryIce.Date = Ice.createTempClass()
    class Date(object):
        """Date as year, month and day."""
        def __init__(self, year=0, month=0, day=0):
            self.year = year
            self.month = month
            self.day = day

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.year)
            _h = 5 * _h + Ice.getHash(self.month)
            _h = 5 * _h + Ice.getHash(self.day)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_HenryIce.Date):
                return NotImplemented
            else:
                if self.year is None or other.year is None:
                    if self.year != other.year:
                        return (-1 if self.year is None else 1)
                else:
                    if self.year < other.year:
                        return -1
                    elif self.year > other.year:
                        return 1
                if self.month is None or other.month is None:
                    if self.month != other.month:
                        return (-1 if self.month is None else 1)
                else:
                    if self.month < other.month:
                        return -1
                    elif self.month > other.month:
                        return 1
                if self.day is None or other.day is None:
                    if self.day != other.day:
                        return (-1 if self.day is None else 1)
                else:
                    if self.day < other.day:
                        return -1
                    elif self.day > other.day:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_HenryIce._t_Date)

        __repr__ = __str__

    _M_HenryIce._t_Date = IcePy.defineStruct('::HenryIce::Date', Date, (), (
        ('year', (), IcePy._t_int),
        ('month', (), IcePy._t_int),
        ('day', (), IcePy._t_int)
    ))

    _M_HenryIce.Date = Date
    del Date

if '_t_DateVector' not in _M_HenryIce.__dict__:
    _M_HenryIce._t_DateVector = IcePy.defineSequence('::HenryIce::DateVector', (), _M_HenryIce._t_Date)

# End of module HenryIce
