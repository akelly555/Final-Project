# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `StatsSvc.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import Types_ice

# Included module HenryIce
_M_HenryIce = Ice.openModule('HenryIce')

# Start of module HenryIce
__name__ = 'HenryIce'

if 'StatsSvc' not in _M_HenryIce.__dict__:
    _M_HenryIce.StatsSvc = Ice.createTempClass()
    class StatsSvc(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_HenryIce.StatsSvc:
                raise RuntimeError('HenryIce.StatsSvc is an abstract class')

        def ice_ids(self, current=None):
            return ('::HenryIce::StatsSvc', '::Ice::Object')

        def ice_id(self, current=None):
            return '::HenryIce::StatsSvc'

        def ice_staticId():
            return '::HenryIce::StatsSvc'
        ice_staticId = staticmethod(ice_staticId)

        def battingStatsLabels(self, current=None):
            """Returns labels for batting stats.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def fieldingStatsLabels(self, current=None):
            """Returns labels for batting stats.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def pitchingStatsLabels(self, current=None):
            """Returns labels for batting stats.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def baseRunningStatsLabels(self, current=None):
            """Returns labels for base running stats.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def volStatsLabels(self, current=None):
            """Returns labels for volatility stats.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def battingStats(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, nSeries, current=None):
            """Returns batting stats for the player, R/L, team or league and ballpark within a season.
            Arguments:
            sBatter -- 
            cBatterSide -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nSeason -- 
            nSeries -- 
            current -- The Current object for the invocation."""
            pass

        def battingStats2(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nPos, nSeason, nSeries, current=None):
            """Returns batting stats for the player, R/L, team or league, ballpark and position within a season.
            Arguments:
            sBatter -- 
            cBatterSide -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nPos -- 
            nSeason -- 
            nSeries -- 
            current -- The Current object for the invocation."""
            pass

        def fieldingStats(self, sFielderID, nPos, nSeason, nSeries, current=None):
            """Returns fielding stats for the player within a season.
            Arguments:
            sFielderID -- 
            nPos -- 
            nSeason -- 
            nSeries -- 
            current -- The Current object for the invocation."""
            pass

        def fieldingStats2(self, sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, nSeries, current=None):
            """Returns fielding stats for the player, team or league and ballpark within a season.
            Arguments:
            sFielder -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nPos -- 
            nSeason -- 
            nSeries -- 
            current -- The Current object for the invocation."""
            pass

        def pitchingStats(self, sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nSeason, nSeries, current=None):
            """Returns pitching stats for the player, R/L, team or league and ballpark within a season.
            Arguments:
            sPitcher -- 
            cPitcherHand -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nSeason -- 
            nSeries -- 
            current -- The Current object for the invocation."""
            pass

        def battingVolStats(self, sBatter, sTeam, nSeason, current=None):
            """Returns vol stats for the batter or team within a season.
            Arguments:
            sBatter -- 
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def pitchingVolStats(self, sPitcher, sTeam, nSeason, current=None):
            """Returns vol stats for the pitcher or team within a season.
            Arguments:
            sPitcher -- 
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def sortBattingStats(self, nSeason, nSeries, bTeam, sSortMetric, minPA, bDescOrder, current=None):
            """Returns batting stats for all players or teams sorted by a chosen metric.
            Arguments:
            nSeason -- 
            nSeries -- 
            bTeam -- 
            sSortMetric -- 
            minPA -- 
            bDescOrder -- 
            current -- The Current object for the invocation."""
            pass

        def sortFieldingStats(self, nSeason, nSeries, bTeam, sSortMetric, minCH, bDescOrder, current=None):
            """Returns fielding stats for all players or teams sorted by a chosen metric.
            Arguments:
            nSeason -- 
            nSeries -- 
            bTeam -- 
            sSortMetric -- 
            minCH -- 
            bDescOrder -- 
            current -- The Current object for the invocation."""
            pass

        def sortPitchingStats(self, nSeason, nSeries, bTeam, sSortMetric, minBF, bDescOrder, current=None):
            """Returns pitching stats for all players or teams sorted by a chosen metric.
            Arguments:
            nSeason -- 
            nSeries -- 
            bTeam -- 
            sSortMetric -- 
            minBF -- 
            bDescOrder -- 
            current -- The Current object for the invocation."""
            pass

        def sortBattingVolStats(self, nSeason, bTeam, sSortMetric, minPA, bDescOrder, current=None):
            """Returns batting volatility stats for all players or teams sorted by a chosen metric.
            Arguments:
            nSeason -- 
            bTeam -- 
            sSortMetric -- 
            minPA -- 
            bDescOrder -- 
            current -- The Current object for the invocation."""
            pass

        def sortPitchingVolStats(self, nSeason, bTeam, sSortMetric, minBF, bDescOrder, current=None):
            """Returns pitching volatility stats for all players or teams sorted by a chosen metric.
            Arguments:
            nSeason -- 
            bTeam -- 
            sSortMetric -- 
            minBF -- 
            bDescOrder -- 
            current -- The Current object for the invocation."""
            pass

        def battingHitLocs(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nHitType, nContactType, nSeason, current=None):
            """Returns a grid with the locations of batted balls by the batter, R/L, team or league,
            and ballpark within a season.
            Arguments:
            sBatter -- 
            cBatterSide -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nHitType -- 
            nContactType -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def fieldingHitLocs(self, sFielder, sTeam, sLeague, sBallpark, nPos, nHitType, nContactType, nSeason, current=None):
            """Returns a grid with the locations of batted balls fielded by the fielder, team or league,
            and ballpark within a season.
            Arguments:
            sFielder -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nPos -- 
            nHitType -- 
            nContactType -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def fieldingHitLocs2(self, fielders, positions, sBallpark, nHitType, nContactType, nSeason, current=None):
            """Returns a grid with the locations of batted balls fielded by a set of fielders
            and ballpark within a season.
            Arguments:
            fielders -- 
            positions -- 
            sBallpark -- 
            nHitType -- 
            nContactType -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def pitchingHitLocs(self, sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nHitType, nContactType, nSeason, current=None):
            """Returns a grid with the locations of batted balls given up by the pitcher, R/L, team or
            league, and ballpark within a season.
            Arguments:
            sPitcher -- 
            cPitcherHand -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nHitType -- 
            nContactType -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def baseRunningOffStats(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, current=None):
            """Returns a grid with offensive base running stats by batter, R/L, team or league, and
            ballpark within a season.
            Arguments:
            sBatter -- 
            cBatterSide -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def baseRunningDefStats(self, sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, current=None):
            """Returns a grid with defensive base running stats allowed by a fielder, team or league,
            and ballpark within a season.
            Arguments:
            sFielder -- 
            sTeam -- 
            sLeague -- 
            sBallpark -- 
            nPos -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def baseRunningDefStats2(self, fielders, positions, sBallpark, nSeason, current=None):
            """Returns a grid with defensive base running stats allowedby a set of fielders and
            ballpark within a season.
            Arguments:
            fielders -- 
            positions -- 
            sBallpark -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def battingMatchupStats(self, sBatterID, cPitcherHand, nSeason, current=None):
            """Returns batting stats for a player against left/right pitchers within a season.
            Arguments:
            sBatterID -- 
            cPitcherHand -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def battingMatchupStats2(self, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nSeason, current=None):
            """Returns batting stats against a specific pitcher, against lefties/righties, against
            a team or the league, and ballpark within a season.
            Arguments:
            sBatter -- 
            cBatterSide -- 
            sBattingTeam -- 
            sBattingLeague -- 
            sPitcher -- 
            cPitcherHand -- 
            sPitchingTeam -- 
            sPitchingLeague -- 
            sBallpark -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def battingMatchupStats3(self, sBatter, cBatterSide, sBattingTeam, sBattingLeague, nPos, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nSeason, current=None):
            """Returns batting stats against a specific pitcher, against lefties/righties, against
            a team or the league, and ballpark within a season.
            Arguments:
            sBatter -- 
            cBatterSide -- 
            sBattingTeam -- 
            sBattingLeague -- 
            nPos -- 
            sPitcher -- 
            cPitcherHand -- 
            sPitchingTeam -- 
            sPitchingLeague -- 
            sBallpark -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def pitchingMatchupStats(self, sPitcherID, cBatterSide, nSeason, current=None):
            """Returns pitching stats for a pitcher against left/right batters within a season.
            Arguments:
            sPitcherID -- 
            cBatterSide -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def pitchingMatchupStats2(self, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sBallpark, nSeason, current=None):
            """Returns pitching stats against a specific batter, against all left/right batters,
            against a team or the league, and ballpark within a season.
            Arguments:
            sPitcher -- 
            cPitcherHand -- 
            sPitchingTeam -- 
            sPitchingLeague -- 
            sBatter -- 
            cBatterSide -- 
            sBattingTeam -- 
            sBattingLeague -- 
            sBallpark -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def battingMatchupHitLocs(self, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nHitType, nContactType, nSeason, current=None):
            """Returns a grid with the locations of batted balls by a batter against a specific pitcher,
            against lefties/righties, against a team or the league, and ballpark within a season.
            Arguments:
            sBatter -- 
            cBatterSide -- 
            sBattingTeam -- 
            sBattingLeague -- 
            sPitcher -- 
            cPitcherHand -- 
            sPitchingTeam -- 
            sPitchingLeague -- 
            sBallpark -- 
            nHitType -- 
            nContactType -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def pitchingMatchupHitLocs(self, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sBallpark, nHitType, nContactType, nSeason, current=None):
            """Returns a grid with the locations of batted balls given up by a pitching against a specific
            batter, against all left/right batters, against a team or the league, and ballpark within
            a season.
            Arguments:
            sPitcher -- 
            cPitcherHand -- 
            sPitchingTeam -- 
            sPitchingLeague -- 
            sBatter -- 
            cBatterSide -- 
            sBattingTeam -- 
            sBattingLeague -- 
            sBallpark -- 
            nHitType -- 
            nContactType -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def expectedRuns(self, sLeague, nStartInn, nEndInn, nSeason, current=None):
            """Returns expected runs for each baserunner-out combination for a range of innings.
            Arguments:
            sLeague -- 
            nStartInn -- 
            nEndInn -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def winProbabilities(self, cHomeAway, nSeason, current=None):
            """Returns win probabilities for home or away teams by score differential and
            remaining half innings.
            Arguments:
            cHomeAway -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def winProbability(self, cHomeAway, nScoreDiff, inning, cTopBottom, nOuts, bRunner1, bRunner2, bRunner3, nSeason, current=None):
            """Returns win probability for the given game situation.
            Arguments:
            cHomeAway -- 
            nScoreDiff -- 
            inning -- 
            cTopBottom -- 
            nOuts -- 
            bRunner1 -- 
            bRunner2 -- 
            bRunner3 -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_HenryIce._t_StatsSvc)

        __repr__ = __str__

    _M_HenryIce.StatsSvcPrx = Ice.createTempClass()
    class StatsSvcPrx(Ice.ObjectPrx):

        """Returns labels for batting stats.
        Arguments:
        _ctx -- The request context for the invocation."""
        def battingStatsLabels(self, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingStatsLabels.invoke(self, ((), _ctx))

        """Returns labels for batting stats.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingStatsLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingStatsLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for batting stats.
        Arguments:"""
        def end_battingStatsLabels(self, _r):
            return _M_HenryIce.StatsSvc._op_battingStatsLabels.end(self, _r)

        """Returns labels for batting stats.
        Arguments:
        _ctx -- The request context for the invocation."""
        def fieldingStatsLabels(self, _ctx=None):
            return _M_HenryIce.StatsSvc._op_fieldingStatsLabels.invoke(self, ((), _ctx))

        """Returns labels for batting stats.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_fieldingStatsLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_fieldingStatsLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for batting stats.
        Arguments:"""
        def end_fieldingStatsLabels(self, _r):
            return _M_HenryIce.StatsSvc._op_fieldingStatsLabels.end(self, _r)

        """Returns labels for batting stats.
        Arguments:
        _ctx -- The request context for the invocation."""
        def pitchingStatsLabels(self, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingStatsLabels.invoke(self, ((), _ctx))

        """Returns labels for batting stats.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_pitchingStatsLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingStatsLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for batting stats.
        Arguments:"""
        def end_pitchingStatsLabels(self, _r):
            return _M_HenryIce.StatsSvc._op_pitchingStatsLabels.end(self, _r)

        """Returns labels for base running stats.
        Arguments:
        _ctx -- The request context for the invocation."""
        def baseRunningStatsLabels(self, _ctx=None):
            return _M_HenryIce.StatsSvc._op_baseRunningStatsLabels.invoke(self, ((), _ctx))

        """Returns labels for base running stats.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_baseRunningStatsLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_baseRunningStatsLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for base running stats.
        Arguments:"""
        def end_baseRunningStatsLabels(self, _r):
            return _M_HenryIce.StatsSvc._op_baseRunningStatsLabels.end(self, _r)

        """Returns labels for volatility stats.
        Arguments:
        _ctx -- The request context for the invocation."""
        def volStatsLabels(self, _ctx=None):
            return _M_HenryIce.StatsSvc._op_volStatsLabels.invoke(self, ((), _ctx))

        """Returns labels for volatility stats.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_volStatsLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_volStatsLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for volatility stats.
        Arguments:"""
        def end_volStatsLabels(self, _r):
            return _M_HenryIce.StatsSvc._op_volStatsLabels.end(self, _r)

        """Returns batting stats for the player, R/L, team or league and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        nSeries -- 
        _ctx -- The request context for the invocation."""
        def battingStats(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, nSeries, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingStats.invoke(self, ((sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, nSeries), _ctx))

        """Returns batting stats for the player, R/L, team or league and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        nSeries -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingStats(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, nSeries, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingStats.begin(self, ((sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, nSeries), _response, _ex, _sent, _ctx))

        """Returns batting stats for the player, R/L, team or league and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        nSeries -- """
        def end_battingStats(self, _r):
            return _M_HenryIce.StatsSvc._op_battingStats.end(self, _r)

        """Returns batting stats for the player, R/L, team or league, ballpark and position within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        nSeries -- 
        _ctx -- The request context for the invocation."""
        def battingStats2(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nPos, nSeason, nSeries, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingStats2.invoke(self, ((sBatter, cBatterSide, sTeam, sLeague, sBallpark, nPos, nSeason, nSeries), _ctx))

        """Returns batting stats for the player, R/L, team or league, ballpark and position within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        nSeries -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingStats2(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nPos, nSeason, nSeries, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingStats2.begin(self, ((sBatter, cBatterSide, sTeam, sLeague, sBallpark, nPos, nSeason, nSeries), _response, _ex, _sent, _ctx))

        """Returns batting stats for the player, R/L, team or league, ballpark and position within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        nSeries -- """
        def end_battingStats2(self, _r):
            return _M_HenryIce.StatsSvc._op_battingStats2.end(self, _r)

        """Returns fielding stats for the player within a season.
        Arguments:
        sFielderID -- 
        nPos -- 
        nSeason -- 
        nSeries -- 
        _ctx -- The request context for the invocation."""
        def fieldingStats(self, sFielderID, nPos, nSeason, nSeries, _ctx=None):
            return _M_HenryIce.StatsSvc._op_fieldingStats.invoke(self, ((sFielderID, nPos, nSeason, nSeries), _ctx))

        """Returns fielding stats for the player within a season.
        Arguments:
        sFielderID -- 
        nPos -- 
        nSeason -- 
        nSeries -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_fieldingStats(self, sFielderID, nPos, nSeason, nSeries, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_fieldingStats.begin(self, ((sFielderID, nPos, nSeason, nSeries), _response, _ex, _sent, _ctx))

        """Returns fielding stats for the player within a season.
        Arguments:
        sFielderID -- 
        nPos -- 
        nSeason -- 
        nSeries -- """
        def end_fieldingStats(self, _r):
            return _M_HenryIce.StatsSvc._op_fieldingStats.end(self, _r)

        """Returns fielding stats for the player, team or league and ballpark within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        nSeries -- 
        _ctx -- The request context for the invocation."""
        def fieldingStats2(self, sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, nSeries, _ctx=None):
            return _M_HenryIce.StatsSvc._op_fieldingStats2.invoke(self, ((sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, nSeries), _ctx))

        """Returns fielding stats for the player, team or league and ballpark within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        nSeries -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_fieldingStats2(self, sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, nSeries, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_fieldingStats2.begin(self, ((sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, nSeries), _response, _ex, _sent, _ctx))

        """Returns fielding stats for the player, team or league and ballpark within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        nSeries -- """
        def end_fieldingStats2(self, _r):
            return _M_HenryIce.StatsSvc._op_fieldingStats2.end(self, _r)

        """Returns pitching stats for the player, R/L, team or league and ballpark within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        nSeries -- 
        _ctx -- The request context for the invocation."""
        def pitchingStats(self, sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nSeason, nSeries, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingStats.invoke(self, ((sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nSeason, nSeries), _ctx))

        """Returns pitching stats for the player, R/L, team or league and ballpark within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        nSeries -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_pitchingStats(self, sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nSeason, nSeries, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingStats.begin(self, ((sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nSeason, nSeries), _response, _ex, _sent, _ctx))

        """Returns pitching stats for the player, R/L, team or league and ballpark within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        nSeries -- """
        def end_pitchingStats(self, _r):
            return _M_HenryIce.StatsSvc._op_pitchingStats.end(self, _r)

        """Returns vol stats for the batter or team within a season.
        Arguments:
        sBatter -- 
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def battingVolStats(self, sBatter, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingVolStats.invoke(self, ((sBatter, sTeam, nSeason), _ctx))

        """Returns vol stats for the batter or team within a season.
        Arguments:
        sBatter -- 
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingVolStats(self, sBatter, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingVolStats.begin(self, ((sBatter, sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns vol stats for the batter or team within a season.
        Arguments:
        sBatter -- 
        sTeam -- 
        nSeason -- """
        def end_battingVolStats(self, _r):
            return _M_HenryIce.StatsSvc._op_battingVolStats.end(self, _r)

        """Returns vol stats for the pitcher or team within a season.
        Arguments:
        sPitcher -- 
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def pitchingVolStats(self, sPitcher, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingVolStats.invoke(self, ((sPitcher, sTeam, nSeason), _ctx))

        """Returns vol stats for the pitcher or team within a season.
        Arguments:
        sPitcher -- 
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_pitchingVolStats(self, sPitcher, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingVolStats.begin(self, ((sPitcher, sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns vol stats for the pitcher or team within a season.
        Arguments:
        sPitcher -- 
        sTeam -- 
        nSeason -- """
        def end_pitchingVolStats(self, _r):
            return _M_HenryIce.StatsSvc._op_pitchingVolStats.end(self, _r)

        """Returns batting stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        nSeries -- 
        bTeam -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- 
        _ctx -- The request context for the invocation."""
        def sortBattingStats(self, nSeason, nSeries, bTeam, sSortMetric, minPA, bDescOrder, _ctx=None):
            return _M_HenryIce.StatsSvc._op_sortBattingStats.invoke(self, ((nSeason, nSeries, bTeam, sSortMetric, minPA, bDescOrder), _ctx))

        """Returns batting stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        nSeries -- 
        bTeam -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_sortBattingStats(self, nSeason, nSeries, bTeam, sSortMetric, minPA, bDescOrder, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_sortBattingStats.begin(self, ((nSeason, nSeries, bTeam, sSortMetric, minPA, bDescOrder), _response, _ex, _sent, _ctx))

        """Returns batting stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        nSeries -- 
        bTeam -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- """
        def end_sortBattingStats(self, _r):
            return _M_HenryIce.StatsSvc._op_sortBattingStats.end(self, _r)

        """Returns fielding stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        nSeries -- 
        bTeam -- 
        sSortMetric -- 
        minCH -- 
        bDescOrder -- 
        _ctx -- The request context for the invocation."""
        def sortFieldingStats(self, nSeason, nSeries, bTeam, sSortMetric, minCH, bDescOrder, _ctx=None):
            return _M_HenryIce.StatsSvc._op_sortFieldingStats.invoke(self, ((nSeason, nSeries, bTeam, sSortMetric, minCH, bDescOrder), _ctx))

        """Returns fielding stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        nSeries -- 
        bTeam -- 
        sSortMetric -- 
        minCH -- 
        bDescOrder -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_sortFieldingStats(self, nSeason, nSeries, bTeam, sSortMetric, minCH, bDescOrder, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_sortFieldingStats.begin(self, ((nSeason, nSeries, bTeam, sSortMetric, minCH, bDescOrder), _response, _ex, _sent, _ctx))

        """Returns fielding stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        nSeries -- 
        bTeam -- 
        sSortMetric -- 
        minCH -- 
        bDescOrder -- """
        def end_sortFieldingStats(self, _r):
            return _M_HenryIce.StatsSvc._op_sortFieldingStats.end(self, _r)

        """Returns pitching stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        nSeries -- 
        bTeam -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- 
        _ctx -- The request context for the invocation."""
        def sortPitchingStats(self, nSeason, nSeries, bTeam, sSortMetric, minBF, bDescOrder, _ctx=None):
            return _M_HenryIce.StatsSvc._op_sortPitchingStats.invoke(self, ((nSeason, nSeries, bTeam, sSortMetric, minBF, bDescOrder), _ctx))

        """Returns pitching stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        nSeries -- 
        bTeam -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_sortPitchingStats(self, nSeason, nSeries, bTeam, sSortMetric, minBF, bDescOrder, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_sortPitchingStats.begin(self, ((nSeason, nSeries, bTeam, sSortMetric, minBF, bDescOrder), _response, _ex, _sent, _ctx))

        """Returns pitching stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        nSeries -- 
        bTeam -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- """
        def end_sortPitchingStats(self, _r):
            return _M_HenryIce.StatsSvc._op_sortPitchingStats.end(self, _r)

        """Returns batting volatility stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        bTeam -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- 
        _ctx -- The request context for the invocation."""
        def sortBattingVolStats(self, nSeason, bTeam, sSortMetric, minPA, bDescOrder, _ctx=None):
            return _M_HenryIce.StatsSvc._op_sortBattingVolStats.invoke(self, ((nSeason, bTeam, sSortMetric, minPA, bDescOrder), _ctx))

        """Returns batting volatility stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        bTeam -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_sortBattingVolStats(self, nSeason, bTeam, sSortMetric, minPA, bDescOrder, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_sortBattingVolStats.begin(self, ((nSeason, bTeam, sSortMetric, minPA, bDescOrder), _response, _ex, _sent, _ctx))

        """Returns batting volatility stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        bTeam -- 
        sSortMetric -- 
        minPA -- 
        bDescOrder -- """
        def end_sortBattingVolStats(self, _r):
            return _M_HenryIce.StatsSvc._op_sortBattingVolStats.end(self, _r)

        """Returns pitching volatility stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        bTeam -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- 
        _ctx -- The request context for the invocation."""
        def sortPitchingVolStats(self, nSeason, bTeam, sSortMetric, minBF, bDescOrder, _ctx=None):
            return _M_HenryIce.StatsSvc._op_sortPitchingVolStats.invoke(self, ((nSeason, bTeam, sSortMetric, minBF, bDescOrder), _ctx))

        """Returns pitching volatility stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        bTeam -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_sortPitchingVolStats(self, nSeason, bTeam, sSortMetric, minBF, bDescOrder, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_sortPitchingVolStats.begin(self, ((nSeason, bTeam, sSortMetric, minBF, bDescOrder), _response, _ex, _sent, _ctx))

        """Returns pitching volatility stats for all players or teams sorted by a chosen metric.
        Arguments:
        nSeason -- 
        bTeam -- 
        sSortMetric -- 
        minBF -- 
        bDescOrder -- """
        def end_sortPitchingVolStats(self, _r):
            return _M_HenryIce.StatsSvc._op_sortPitchingVolStats.end(self, _r)

        """Returns a grid with the locations of batted balls by the batter, R/L, team or league,
        and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def battingHitLocs(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nHitType, nContactType, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingHitLocs.invoke(self, ((sBatter, cBatterSide, sTeam, sLeague, sBallpark, nHitType, nContactType, nSeason), _ctx))

        """Returns a grid with the locations of batted balls by the batter, R/L, team or league,
        and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingHitLocs(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nHitType, nContactType, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingHitLocs.begin(self, ((sBatter, cBatterSide, sTeam, sLeague, sBallpark, nHitType, nContactType, nSeason), _response, _ex, _sent, _ctx))

        """Returns a grid with the locations of batted balls by the batter, R/L, team or league,
        and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- """
        def end_battingHitLocs(self, _r):
            return _M_HenryIce.StatsSvc._op_battingHitLocs.end(self, _r)

        """Returns a grid with the locations of batted balls fielded by the fielder, team or league,
        and ballpark within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def fieldingHitLocs(self, sFielder, sTeam, sLeague, sBallpark, nPos, nHitType, nContactType, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_fieldingHitLocs.invoke(self, ((sFielder, sTeam, sLeague, sBallpark, nPos, nHitType, nContactType, nSeason), _ctx))

        """Returns a grid with the locations of batted balls fielded by the fielder, team or league,
        and ballpark within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_fieldingHitLocs(self, sFielder, sTeam, sLeague, sBallpark, nPos, nHitType, nContactType, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_fieldingHitLocs.begin(self, ((sFielder, sTeam, sLeague, sBallpark, nPos, nHitType, nContactType, nSeason), _response, _ex, _sent, _ctx))

        """Returns a grid with the locations of batted balls fielded by the fielder, team or league,
        and ballpark within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nHitType -- 
        nContactType -- 
        nSeason -- """
        def end_fieldingHitLocs(self, _r):
            return _M_HenryIce.StatsSvc._op_fieldingHitLocs.end(self, _r)

        """Returns a grid with the locations of batted balls fielded by a set of fielders
        and ballpark within a season.
        Arguments:
        fielders -- 
        positions -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def fieldingHitLocs2(self, fielders, positions, sBallpark, nHitType, nContactType, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_fieldingHitLocs2.invoke(self, ((fielders, positions, sBallpark, nHitType, nContactType, nSeason), _ctx))

        """Returns a grid with the locations of batted balls fielded by a set of fielders
        and ballpark within a season.
        Arguments:
        fielders -- 
        positions -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_fieldingHitLocs2(self, fielders, positions, sBallpark, nHitType, nContactType, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_fieldingHitLocs2.begin(self, ((fielders, positions, sBallpark, nHitType, nContactType, nSeason), _response, _ex, _sent, _ctx))

        """Returns a grid with the locations of batted balls fielded by a set of fielders
        and ballpark within a season.
        Arguments:
        fielders -- 
        positions -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- """
        def end_fieldingHitLocs2(self, _r):
            return _M_HenryIce.StatsSvc._op_fieldingHitLocs2.end(self, _r)

        """Returns a grid with the locations of batted balls given up by the pitcher, R/L, team or
        league, and ballpark within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def pitchingHitLocs(self, sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nHitType, nContactType, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingHitLocs.invoke(self, ((sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nHitType, nContactType, nSeason), _ctx))

        """Returns a grid with the locations of batted balls given up by the pitcher, R/L, team or
        league, and ballpark within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_pitchingHitLocs(self, sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nHitType, nContactType, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingHitLocs.begin(self, ((sPitcher, cPitcherHand, sTeam, sLeague, sBallpark, nHitType, nContactType, nSeason), _response, _ex, _sent, _ctx))

        """Returns a grid with the locations of batted balls given up by the pitcher, R/L, team or
        league, and ballpark within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- """
        def end_pitchingHitLocs(self, _r):
            return _M_HenryIce.StatsSvc._op_pitchingHitLocs.end(self, _r)

        """Returns a grid with offensive base running stats by batter, R/L, team or league, and
        ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def baseRunningOffStats(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_baseRunningOffStats.invoke(self, ((sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason), _ctx))

        """Returns a grid with offensive base running stats by batter, R/L, team or league, and
        ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_baseRunningOffStats(self, sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_baseRunningOffStats.begin(self, ((sBatter, cBatterSide, sTeam, sLeague, sBallpark, nSeason), _response, _ex, _sent, _ctx))

        """Returns a grid with offensive base running stats by batter, R/L, team or league, and
        ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nSeason -- """
        def end_baseRunningOffStats(self, _r):
            return _M_HenryIce.StatsSvc._op_baseRunningOffStats.end(self, _r)

        """Returns a grid with defensive base running stats allowed by a fielder, team or league,
        and ballpark within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def baseRunningDefStats(self, sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_baseRunningDefStats.invoke(self, ((sFielder, sTeam, sLeague, sBallpark, nPos, nSeason), _ctx))

        """Returns a grid with defensive base running stats allowed by a fielder, team or league,
        and ballpark within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_baseRunningDefStats(self, sFielder, sTeam, sLeague, sBallpark, nPos, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_baseRunningDefStats.begin(self, ((sFielder, sTeam, sLeague, sBallpark, nPos, nSeason), _response, _ex, _sent, _ctx))

        """Returns a grid with defensive base running stats allowed by a fielder, team or league,
        and ballpark within a season.
        Arguments:
        sFielder -- 
        sTeam -- 
        sLeague -- 
        sBallpark -- 
        nPos -- 
        nSeason -- """
        def end_baseRunningDefStats(self, _r):
            return _M_HenryIce.StatsSvc._op_baseRunningDefStats.end(self, _r)

        """Returns a grid with defensive base running stats allowedby a set of fielders and
        ballpark within a season.
        Arguments:
        fielders -- 
        positions -- 
        sBallpark -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def baseRunningDefStats2(self, fielders, positions, sBallpark, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_baseRunningDefStats2.invoke(self, ((fielders, positions, sBallpark, nSeason), _ctx))

        """Returns a grid with defensive base running stats allowedby a set of fielders and
        ballpark within a season.
        Arguments:
        fielders -- 
        positions -- 
        sBallpark -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_baseRunningDefStats2(self, fielders, positions, sBallpark, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_baseRunningDefStats2.begin(self, ((fielders, positions, sBallpark, nSeason), _response, _ex, _sent, _ctx))

        """Returns a grid with defensive base running stats allowedby a set of fielders and
        ballpark within a season.
        Arguments:
        fielders -- 
        positions -- 
        sBallpark -- 
        nSeason -- """
        def end_baseRunningDefStats2(self, _r):
            return _M_HenryIce.StatsSvc._op_baseRunningDefStats2.end(self, _r)

        """Returns batting stats for a player against left/right pitchers within a season.
        Arguments:
        sBatterID -- 
        cPitcherHand -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def battingMatchupStats(self, sBatterID, cPitcherHand, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingMatchupStats.invoke(self, ((sBatterID, cPitcherHand, nSeason), _ctx))

        """Returns batting stats for a player against left/right pitchers within a season.
        Arguments:
        sBatterID -- 
        cPitcherHand -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingMatchupStats(self, sBatterID, cPitcherHand, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingMatchupStats.begin(self, ((sBatterID, cPitcherHand, nSeason), _response, _ex, _sent, _ctx))

        """Returns batting stats for a player against left/right pitchers within a season.
        Arguments:
        sBatterID -- 
        cPitcherHand -- 
        nSeason -- """
        def end_battingMatchupStats(self, _r):
            return _M_HenryIce.StatsSvc._op_battingMatchupStats.end(self, _r)

        """Returns batting stats against a specific pitcher, against lefties/righties, against
        a team or the league, and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBallpark -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def battingMatchupStats2(self, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingMatchupStats2.invoke(self, ((sBatter, cBatterSide, sBattingTeam, sBattingLeague, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nSeason), _ctx))

        """Returns batting stats against a specific pitcher, against lefties/righties, against
        a team or the league, and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBallpark -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingMatchupStats2(self, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingMatchupStats2.begin(self, ((sBatter, cBatterSide, sBattingTeam, sBattingLeague, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nSeason), _response, _ex, _sent, _ctx))

        """Returns batting stats against a specific pitcher, against lefties/righties, against
        a team or the league, and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBallpark -- 
        nSeason -- """
        def end_battingMatchupStats2(self, _r):
            return _M_HenryIce.StatsSvc._op_battingMatchupStats2.end(self, _r)

        """Returns batting stats against a specific pitcher, against lefties/righties, against
        a team or the league, and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        nPos -- 
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBallpark -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def battingMatchupStats3(self, sBatter, cBatterSide, sBattingTeam, sBattingLeague, nPos, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingMatchupStats3.invoke(self, ((sBatter, cBatterSide, sBattingTeam, sBattingLeague, nPos, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nSeason), _ctx))

        """Returns batting stats against a specific pitcher, against lefties/righties, against
        a team or the league, and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        nPos -- 
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBallpark -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingMatchupStats3(self, sBatter, cBatterSide, sBattingTeam, sBattingLeague, nPos, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingMatchupStats3.begin(self, ((sBatter, cBatterSide, sBattingTeam, sBattingLeague, nPos, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nSeason), _response, _ex, _sent, _ctx))

        """Returns batting stats against a specific pitcher, against lefties/righties, against
        a team or the league, and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        nPos -- 
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBallpark -- 
        nSeason -- """
        def end_battingMatchupStats3(self, _r):
            return _M_HenryIce.StatsSvc._op_battingMatchupStats3.end(self, _r)

        """Returns pitching stats for a pitcher against left/right batters within a season.
        Arguments:
        sPitcherID -- 
        cBatterSide -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def pitchingMatchupStats(self, sPitcherID, cBatterSide, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingMatchupStats.invoke(self, ((sPitcherID, cBatterSide, nSeason), _ctx))

        """Returns pitching stats for a pitcher against left/right batters within a season.
        Arguments:
        sPitcherID -- 
        cBatterSide -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_pitchingMatchupStats(self, sPitcherID, cBatterSide, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingMatchupStats.begin(self, ((sPitcherID, cBatterSide, nSeason), _response, _ex, _sent, _ctx))

        """Returns pitching stats for a pitcher against left/right batters within a season.
        Arguments:
        sPitcherID -- 
        cBatterSide -- 
        nSeason -- """
        def end_pitchingMatchupStats(self, _r):
            return _M_HenryIce.StatsSvc._op_pitchingMatchupStats.end(self, _r)

        """Returns pitching stats against a specific batter, against all left/right batters,
        against a team or the league, and ballpark within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sBallpark -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def pitchingMatchupStats2(self, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sBallpark, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingMatchupStats2.invoke(self, ((sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sBallpark, nSeason), _ctx))

        """Returns pitching stats against a specific batter, against all left/right batters,
        against a team or the league, and ballpark within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sBallpark -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_pitchingMatchupStats2(self, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sBallpark, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingMatchupStats2.begin(self, ((sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sBallpark, nSeason), _response, _ex, _sent, _ctx))

        """Returns pitching stats against a specific batter, against all left/right batters,
        against a team or the league, and ballpark within a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sBallpark -- 
        nSeason -- """
        def end_pitchingMatchupStats2(self, _r):
            return _M_HenryIce.StatsSvc._op_pitchingMatchupStats2.end(self, _r)

        """Returns a grid with the locations of batted balls by a batter against a specific pitcher,
        against lefties/righties, against a team or the league, and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def battingMatchupHitLocs(self, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nHitType, nContactType, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingMatchupHitLocs.invoke(self, ((sBatter, cBatterSide, sBattingTeam, sBattingLeague, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nHitType, nContactType, nSeason), _ctx))

        """Returns a grid with the locations of batted balls by a batter against a specific pitcher,
        against lefties/righties, against a team or the league, and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_battingMatchupHitLocs(self, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nHitType, nContactType, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_battingMatchupHitLocs.begin(self, ((sBatter, cBatterSide, sBattingTeam, sBattingLeague, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBallpark, nHitType, nContactType, nSeason), _response, _ex, _sent, _ctx))

        """Returns a grid with the locations of batted balls by a batter against a specific pitcher,
        against lefties/righties, against a team or the league, and ballpark within a season.
        Arguments:
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- """
        def end_battingMatchupHitLocs(self, _r):
            return _M_HenryIce.StatsSvc._op_battingMatchupHitLocs.end(self, _r)

        """Returns a grid with the locations of batted balls given up by a pitching against a specific
        batter, against all left/right batters, against a team or the league, and ballpark within
        a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def pitchingMatchupHitLocs(self, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sBallpark, nHitType, nContactType, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingMatchupHitLocs.invoke(self, ((sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sBallpark, nHitType, nContactType, nSeason), _ctx))

        """Returns a grid with the locations of batted balls given up by a pitching against a specific
        batter, against all left/right batters, against a team or the league, and ballpark within
        a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_pitchingMatchupHitLocs(self, sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sBallpark, nHitType, nContactType, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_pitchingMatchupHitLocs.begin(self, ((sPitcher, cPitcherHand, sPitchingTeam, sPitchingLeague, sBatter, cBatterSide, sBattingTeam, sBattingLeague, sBallpark, nHitType, nContactType, nSeason), _response, _ex, _sent, _ctx))

        """Returns a grid with the locations of batted balls given up by a pitching against a specific
        batter, against all left/right batters, against a team or the league, and ballpark within
        a season.
        Arguments:
        sPitcher -- 
        cPitcherHand -- 
        sPitchingTeam -- 
        sPitchingLeague -- 
        sBatter -- 
        cBatterSide -- 
        sBattingTeam -- 
        sBattingLeague -- 
        sBallpark -- 
        nHitType -- 
        nContactType -- 
        nSeason -- """
        def end_pitchingMatchupHitLocs(self, _r):
            return _M_HenryIce.StatsSvc._op_pitchingMatchupHitLocs.end(self, _r)

        """Returns expected runs for each baserunner-out combination for a range of innings.
        Arguments:
        sLeague -- 
        nStartInn -- 
        nEndInn -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def expectedRuns(self, sLeague, nStartInn, nEndInn, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_expectedRuns.invoke(self, ((sLeague, nStartInn, nEndInn, nSeason), _ctx))

        """Returns expected runs for each baserunner-out combination for a range of innings.
        Arguments:
        sLeague -- 
        nStartInn -- 
        nEndInn -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_expectedRuns(self, sLeague, nStartInn, nEndInn, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_expectedRuns.begin(self, ((sLeague, nStartInn, nEndInn, nSeason), _response, _ex, _sent, _ctx))

        """Returns expected runs for each baserunner-out combination for a range of innings.
        Arguments:
        sLeague -- 
        nStartInn -- 
        nEndInn -- 
        nSeason -- """
        def end_expectedRuns(self, _r):
            return _M_HenryIce.StatsSvc._op_expectedRuns.end(self, _r)

        """Returns win probabilities for home or away teams by score differential and
        remaining half innings.
        Arguments:
        cHomeAway -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def winProbabilities(self, cHomeAway, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_winProbabilities.invoke(self, ((cHomeAway, nSeason), _ctx))

        """Returns win probabilities for home or away teams by score differential and
        remaining half innings.
        Arguments:
        cHomeAway -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_winProbabilities(self, cHomeAway, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_winProbabilities.begin(self, ((cHomeAway, nSeason), _response, _ex, _sent, _ctx))

        """Returns win probabilities for home or away teams by score differential and
        remaining half innings.
        Arguments:
        cHomeAway -- 
        nSeason -- """
        def end_winProbabilities(self, _r):
            return _M_HenryIce.StatsSvc._op_winProbabilities.end(self, _r)

        """Returns win probability for the given game situation.
        Arguments:
        cHomeAway -- 
        nScoreDiff -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        bRunner1 -- 
        bRunner2 -- 
        bRunner3 -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def winProbability(self, cHomeAway, nScoreDiff, inning, cTopBottom, nOuts, bRunner1, bRunner2, bRunner3, nSeason, _ctx=None):
            return _M_HenryIce.StatsSvc._op_winProbability.invoke(self, ((cHomeAway, nScoreDiff, inning, cTopBottom, nOuts, bRunner1, bRunner2, bRunner3, nSeason), _ctx))

        """Returns win probability for the given game situation.
        Arguments:
        cHomeAway -- 
        nScoreDiff -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        bRunner1 -- 
        bRunner2 -- 
        bRunner3 -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_winProbability(self, cHomeAway, nScoreDiff, inning, cTopBottom, nOuts, bRunner1, bRunner2, bRunner3, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.StatsSvc._op_winProbability.begin(self, ((cHomeAway, nScoreDiff, inning, cTopBottom, nOuts, bRunner1, bRunner2, bRunner3, nSeason), _response, _ex, _sent, _ctx))

        """Returns win probability for the given game situation.
        Arguments:
        cHomeAway -- 
        nScoreDiff -- 
        inning -- 
        cTopBottom -- 
        nOuts -- 
        bRunner1 -- 
        bRunner2 -- 
        bRunner3 -- 
        nSeason -- """
        def end_winProbability(self, _r):
            return _M_HenryIce.StatsSvc._op_winProbability.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_HenryIce.StatsSvcPrx.ice_checkedCast(proxy, '::HenryIce::StatsSvc', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_HenryIce.StatsSvcPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::HenryIce::StatsSvc'
        ice_staticId = staticmethod(ice_staticId)

    _M_HenryIce._t_StatsSvcPrx = IcePy.defineProxy('::HenryIce::StatsSvc', StatsSvcPrx)

    _M_HenryIce._t_StatsSvc = IcePy.defineClass('::HenryIce::StatsSvc', StatsSvc, -1, (), True, False, None, (), ())
    StatsSvc._ice_type = _M_HenryIce._t_StatsSvc

    StatsSvc._op_battingStatsLabels = IcePy.Operation('battingStatsLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    StatsSvc._op_fieldingStatsLabels = IcePy.Operation('fieldingStatsLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    StatsSvc._op_pitchingStatsLabels = IcePy.Operation('pitchingStatsLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    StatsSvc._op_baseRunningStatsLabels = IcePy.Operation('baseRunningStatsLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    StatsSvc._op_volStatsLabels = IcePy.Operation('volStatsLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    StatsSvc._op_battingStats = IcePy.Operation('battingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_battingStats2 = IcePy.Operation('battingStats2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_fieldingStats = IcePy.Operation('fieldingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_fieldingStats2 = IcePy.Operation('fieldingStats2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_pitchingStats = IcePy.Operation('pitchingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_battingVolStats = IcePy.Operation('battingVolStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_pitchingVolStats = IcePy.Operation('pitchingVolStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_sortBattingStats = IcePy.Operation('sortBattingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    StatsSvc._op_sortFieldingStats = IcePy.Operation('sortFieldingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    StatsSvc._op_sortPitchingStats = IcePy.Operation('sortPitchingStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    StatsSvc._op_sortBattingVolStats = IcePy.Operation('sortBattingVolStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    StatsSvc._op_sortPitchingVolStats = IcePy.Operation('sortPitchingVolStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    StatsSvc._op_battingHitLocs = IcePy.Operation('battingHitLocs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    StatsSvc._op_fieldingHitLocs = IcePy.Operation('fieldingHitLocs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    StatsSvc._op_fieldingHitLocs2 = IcePy.Operation('fieldingHitLocs2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    StatsSvc._op_pitchingHitLocs = IcePy.Operation('pitchingHitLocs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    StatsSvc._op_baseRunningOffStats = IcePy.Operation('baseRunningOffStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    StatsSvc._op_baseRunningDefStats = IcePy.Operation('baseRunningDefStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    StatsSvc._op_baseRunningDefStats2 = IcePy.Operation('baseRunningDefStats2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    StatsSvc._op_battingMatchupStats = IcePy.Operation('battingMatchupStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_battingMatchupStats2 = IcePy.Operation('battingMatchupStats2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_battingMatchupStats3 = IcePy.Operation('battingMatchupStats3', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_pitchingMatchupStats = IcePy.Operation('pitchingMatchupStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_pitchingMatchupStats2 = IcePy.Operation('pitchingMatchupStats2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleVector, False, 0), ())
    StatsSvc._op_battingMatchupHitLocs = IcePy.Operation('battingMatchupHitLocs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    StatsSvc._op_pitchingMatchupHitLocs = IcePy.Operation('pitchingMatchupHitLocs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_IntMatrix, False, 0), ())
    StatsSvc._op_expectedRuns = IcePy.Operation('expectedRuns', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleMatrix, False, 0), ())
    StatsSvc._op_winProbabilities = IcePy.Operation('winProbabilities', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_DoubleMatrix, False, 0), ())
    StatsSvc._op_winProbability = IcePy.Operation('winProbability', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_bool, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_double, False, 0), ())

    _M_HenryIce.StatsSvc = StatsSvc
    del StatsSvc

    _M_HenryIce.StatsSvcPrx = StatsSvcPrx
    del StatsSvcPrx

# End of module HenryIce
