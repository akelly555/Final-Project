# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `DataSvc.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import Types_ice

# Included module HenryIce
_M_HenryIce = Ice.openModule('HenryIce')

# Start of module HenryIce
__name__ = 'HenryIce'

if 'DataSvc' not in _M_HenryIce.__dict__:
    _M_HenryIce.DataSvc = Ice.createTempClass()
    class DataSvc(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_HenryIce.DataSvc:
                raise RuntimeError('HenryIce.DataSvc is an abstract class')

        def ice_ids(self, current=None):
            return ('::HenryIce::DataSvc', '::Ice::Object')

        def ice_id(self, current=None):
            return '::HenryIce::DataSvc'

        def ice_staticId():
            return '::HenryIce::DataSvc'
        ice_staticId = staticmethod(ice_staticId)

        def henryVersion(self, current=None):
            """Returns the current library version.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def serverVersion(self, current=None):
            """Returns the current server version.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def setRetroDBPath(self, sDBPath, current=None):
            """Sets the full input database path (including file name).
            Arguments:
            sDBPath -- 
            current -- The Current object for the invocation."""
            pass

        def setHenryDBPath(self, sDBPath, current=None):
            """Sets the full output database path (including file name).
            Arguments:
            sDBPath -- 
            current -- The Current object for the invocation."""
            pass

        def setGameDataAvailable(self, bFlag, current=None):
            """Sets a flag indicating whether game data is available for calculating stats
            on the fly.
            Arguments:
            bFlag -- 
            current -- The Current object for the invocation."""
            pass

        def personID(self, sLastName, sFirstName, nSeason, current=None):
            """Returns the unique identifier for the person.
            Arguments:
            sLastName -- 
            sFirstName -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def personName(self, sPersonID, current=None):
            """Returns the name of the person as last, first.
            Arguments:
            sPersonID -- 
            current -- The Current object for the invocation."""
            pass

        def savePerson(self, sPersonID, sLastName, sFirstName, debut, current=None):
            """Saves a person.
            Arguments:
            sPersonID -- 
            sLastName -- 
            sFirstName -- 
            debut -- 
            current -- The Current object for the invocation."""
            pass

        def delPerson(self, sPersonID, current=None):
            """Deletes the person.
            Arguments:
            sPersonID -- 
            current -- The Current object for the invocation."""
            pass

        def uniquePlayerID(self, sLastName, sFirstName, sTeam, nSeason, current=None):
            """Returns the unique identifier for the player.
            Arguments:
            sLastName -- 
            sFirstName -- 
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def playerID(self, sLastName, sFirstName, sTeam, nSeason, current=None):
            """Returns the identifier for the player.
            Arguments:
            sLastName -- 
            sFirstName -- 
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def savePlayer(self, sPlayerID, sTeamID, nSeason, cBats, cThrows, sPosition, current=None):
            """Saves the player.
            Arguments:
            sPlayerID -- 
            sTeamID -- 
            nSeason -- 
            cBats -- 
            cThrows -- 
            sPosition -- 
            current -- The Current object for the invocation."""
            pass

        def delPlayer(self, sPlayerID, sTeamID, nSeason, current=None):
            """Deletes the player.
            Arguments:
            sPlayerID -- 
            sTeamID -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def uniqueTeamID(self, sName, nSeason, current=None):
            """Returns the unique identifier for the team.
            Arguments:
            sName -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def uniqueTeamID2(self, sNickname, sCity, nSeason, current=None):
            """Returns the unique identifier for the team.
            Arguments:
            sNickname -- 
            sCity -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def teamID(self, sNickname, sCity, nSeason, current=None):
            """Returns the identifier for the team.
            Arguments:
            sNickname -- 
            sCity -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def saveTeam(self, sTeamID, sLeague, sDivision, nSeason, current=None):
            """Saves the team.
            Arguments:
            sTeamID -- 
            sLeague -- 
            sDivision -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def delTeam(self, sTeamID, sLeague, sDivision, nSeason, current=None):
            """Deletes the team.
            Arguments:
            sTeamID -- 
            sLeague -- 
            sDivision -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def updateTeamDivision(self, sTeamID, nSeason, sDivision, current=None):
            """Updates the team's division for the given season.
            Arguments:
            sTeamID -- 
            nSeason -- 
            sDivision -- 
            current -- The Current object for the invocation."""
            pass

        def saveTeamWL(self, sTeam, nSeason, nSeries, nWon, nLost, current=None):
            """Saves won-lost record for a team and series.
            Arguments:
            sTeam -- 
            nSeason -- 
            nSeries -- 
            nWon -- 
            nLost -- 
            current -- The Current object for the invocation."""
            pass

        def delTeamWL(self, sTeam, nSeason, nSeries, current=None):
            """Deletes a team's won-lost record for a series.
            Arguments:
            sTeam -- 
            nSeason -- 
            nSeries -- 
            current -- The Current object for the invocation."""
            pass

        def teamName(self, sTeamID, nSeason, current=None):
            """Returns the name of the team as nickname, city.
            Arguments:
            sTeamID -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def teamNames(self, nSeason, current=None):
            """Returns team names.
            Arguments:
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def teamNamesInLeague(self, sLeague, nSeason, current=None):
            """Returns team names for a league.
            Arguments:
            sLeague -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def teamCity(self, sTeamID, nSeason, current=None):
            """Returns the the team city (league) to avoid trademark issues.
            Arguments:
            sTeamID -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def teamCities(self, nSeason, current=None):
            """Returns team cities (league) to avoid trademark issues.
            Arguments:
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def teamCitiesInLeague(self, sLeague, nSeason, current=None):
            """Returns team names for a league as city to avoid trademark issues.
            Arguments:
            sLeague -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def uniqueBallparkID(self, sName, sCity, nSeason, current=None):
            """Returns the unique identifier for the ballpark.
            Arguments:
            sName -- 
            sCity -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def ballparkID(self, sName, sCity, nSeason, current=None):
            """Returns the identifier for the ballpark.
            Arguments:
            sName -- 
            sCity -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def uniqueBallparkIDForTeam(self, sTeam, nSeason, current=None):
            """Returns the unique identifier of the given team's home ballpark.
            Arguments:
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def ballparkIDForTeam(self, sTeam, nSeason, current=None):
            """Returns the identifier of the given team's home ballpark.
            Arguments:
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def saveTeamBallpark(self, sTeam, sBallpark, nSeason, current=None):
            """Saves the team-ballpark mapping for a season.
            Arguments:
            sTeam -- 
            sBallpark -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def defaultLineup(self, sTeam, cPitcherHand, nSeason, current=None):
            """Returns the default lineup for the given team and season when facing L/R pitcher.
            Arguments:
            sTeam -- 
            cPitcherHand -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def saveDefaultLineup(self, sTeam, cPitcherHand, players, positions, nSeason, current=None):
            """Saves the default lineup for a team and season when facing a L/R pitcher.
            Arguments:
            sTeam -- 
            cPitcherHand -- 
            players -- 
            positions -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def playerLabels(self, current=None):
            """Returns labels for player data.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def playerData(self, sPlayer, sTeam, nSeason, current=None):
            """Returns data for the given player and season.
            Arguments:
            sPlayer -- 
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def playerBattingSide(self, sPlayer, sTeam, nSeason, current=None):
            """Returns the batting side for the given player and season.
            Arguments:
            sPlayer -- 
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def playerThrowingHand(self, sPlayer, sTeam, nSeason, current=None):
            """Returns the throwing hand for the given player and season.
            Arguments:
            sPlayer -- 
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def playerData2(self, sPlayerID, nSeason, current=None):
            """Returns data for the given player and season.
            Arguments:
            sPlayerID -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def findPlayers(self, sLastName, sFirstName, sTeam, nSeason, current=None):
            """Returns player and lineup data based on name, (optional) team and season.
            Arguments:
            sLastName -- 
            sFirstName -- 
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def findPlayers2(self, sTeam, nSeason, current=None):
            """Returns player and lineup data based on team and season.
            Arguments:
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def gamesForPlayer(self, sPlayer, nSeason, current=None):
            """Returns games for the player and season.
            Arguments:
            sPlayer -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def gamesForTeam(self, sTeam, nSeason, current=None):
            """Returns games for the team and season.
            Arguments:
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def playerGameData(self, sPlayer, nSeason, current=None):
            """Returns games for the player and season.
            Arguments:
            sPlayer -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def teamGameData(self, sTeam, nSeason, current=None):
            """Returns games for the team and season.
            Arguments:
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def gamePlays(self, nGame, current=None):
            """Returns plays for the game.
            Arguments:
            nGame -- 
            current -- The Current object for the invocation."""
            pass

        def batterPlays(self, sPlayer, nSeason, current=None):
            """Returns plays for the batter and season.
            Arguments:
            sPlayer -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def roster(self, sTeam, nSeason, current=None):
            """Returns the team's cumulative roster for the entire season.
            Arguments:
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def scheduleLabels(self, current=None):
            """Returns labels for schedule data.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def schedule(self, nSeason, current=None):
            """Returns the complete schedule for the season.
            Arguments:
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def teamSchedule(self, sTeam, nSeason, current=None):
            """Returns the team's schedule for the season.
            Arguments:
            sTeam -- 
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def ballparkLabels(self, current=None):
            """Returns labels for ballpark data.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def ballparks(self, current=None):
            """Returns all ballparks in the database.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def loadSeasonSimulationData(self, nSeason, current=None):
            """Loads schedules, default lineups and stats for the given season.
            Arguments:
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def loadStats(self, nSeason, current=None):
            """Loads the stats cache for the given season.
            Arguments:
            nSeason -- 
            current -- The Current object for the invocation."""
            pass

        def clearStats(self, current=None):
            """Clears the cached stats and forces reload.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def clearDataCache(self, current=None):
            """Clears the data cache and forces reload.
            Arguments:
            current -- The Current object for the invocation."""
            pass

        def stringToDate(self, s, current=None):
            """Converts the string to a Date.
            Arguments:
            s -- 
            current -- The Current object for the invocation."""
            pass

        def dateToString(self, d, current=None):
            """Converts the Date to a string.
            Arguments:
            d -- 
            current -- The Current object for the invocation."""
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_HenryIce._t_DataSvc)

        __repr__ = __str__

    _M_HenryIce.DataSvcPrx = Ice.createTempClass()
    class DataSvcPrx(Ice.ObjectPrx):

        """Returns the current library version.
        Arguments:
        _ctx -- The request context for the invocation."""
        def henryVersion(self, _ctx=None):
            return _M_HenryIce.DataSvc._op_henryVersion.invoke(self, ((), _ctx))

        """Returns the current library version.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_henryVersion(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_henryVersion.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns the current library version.
        Arguments:"""
        def end_henryVersion(self, _r):
            return _M_HenryIce.DataSvc._op_henryVersion.end(self, _r)

        """Returns the current server version.
        Arguments:
        _ctx -- The request context for the invocation."""
        def serverVersion(self, _ctx=None):
            return _M_HenryIce.DataSvc._op_serverVersion.invoke(self, ((), _ctx))

        """Returns the current server version.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_serverVersion(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_serverVersion.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns the current server version.
        Arguments:"""
        def end_serverVersion(self, _r):
            return _M_HenryIce.DataSvc._op_serverVersion.end(self, _r)

        """Sets the full input database path (including file name).
        Arguments:
        sDBPath -- 
        _ctx -- The request context for the invocation."""
        def setRetroDBPath(self, sDBPath, _ctx=None):
            return _M_HenryIce.DataSvc._op_setRetroDBPath.invoke(self, ((sDBPath, ), _ctx))

        """Sets the full input database path (including file name).
        Arguments:
        sDBPath -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_setRetroDBPath(self, sDBPath, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_setRetroDBPath.begin(self, ((sDBPath, ), _response, _ex, _sent, _ctx))

        """Sets the full input database path (including file name).
        Arguments:
        sDBPath -- """
        def end_setRetroDBPath(self, _r):
            return _M_HenryIce.DataSvc._op_setRetroDBPath.end(self, _r)

        """Sets the full output database path (including file name).
        Arguments:
        sDBPath -- 
        _ctx -- The request context for the invocation."""
        def setHenryDBPath(self, sDBPath, _ctx=None):
            return _M_HenryIce.DataSvc._op_setHenryDBPath.invoke(self, ((sDBPath, ), _ctx))

        """Sets the full output database path (including file name).
        Arguments:
        sDBPath -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_setHenryDBPath(self, sDBPath, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_setHenryDBPath.begin(self, ((sDBPath, ), _response, _ex, _sent, _ctx))

        """Sets the full output database path (including file name).
        Arguments:
        sDBPath -- """
        def end_setHenryDBPath(self, _r):
            return _M_HenryIce.DataSvc._op_setHenryDBPath.end(self, _r)

        """Sets a flag indicating whether game data is available for calculating stats
        on the fly.
        Arguments:
        bFlag -- 
        _ctx -- The request context for the invocation."""
        def setGameDataAvailable(self, bFlag, _ctx=None):
            return _M_HenryIce.DataSvc._op_setGameDataAvailable.invoke(self, ((bFlag, ), _ctx))

        """Sets a flag indicating whether game data is available for calculating stats
        on the fly.
        Arguments:
        bFlag -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_setGameDataAvailable(self, bFlag, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_setGameDataAvailable.begin(self, ((bFlag, ), _response, _ex, _sent, _ctx))

        """Sets a flag indicating whether game data is available for calculating stats
        on the fly.
        Arguments:
        bFlag -- """
        def end_setGameDataAvailable(self, _r):
            return _M_HenryIce.DataSvc._op_setGameDataAvailable.end(self, _r)

        """Returns the unique identifier for the person.
        Arguments:
        sLastName -- 
        sFirstName -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def personID(self, sLastName, sFirstName, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_personID.invoke(self, ((sLastName, sFirstName, nSeason), _ctx))

        """Returns the unique identifier for the person.
        Arguments:
        sLastName -- 
        sFirstName -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_personID(self, sLastName, sFirstName, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_personID.begin(self, ((sLastName, sFirstName, nSeason), _response, _ex, _sent, _ctx))

        """Returns the unique identifier for the person.
        Arguments:
        sLastName -- 
        sFirstName -- 
        nSeason -- """
        def end_personID(self, _r):
            return _M_HenryIce.DataSvc._op_personID.end(self, _r)

        """Returns the name of the person as last, first.
        Arguments:
        sPersonID -- 
        _ctx -- The request context for the invocation."""
        def personName(self, sPersonID, _ctx=None):
            return _M_HenryIce.DataSvc._op_personName.invoke(self, ((sPersonID, ), _ctx))

        """Returns the name of the person as last, first.
        Arguments:
        sPersonID -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_personName(self, sPersonID, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_personName.begin(self, ((sPersonID, ), _response, _ex, _sent, _ctx))

        """Returns the name of the person as last, first.
        Arguments:
        sPersonID -- """
        def end_personName(self, _r):
            return _M_HenryIce.DataSvc._op_personName.end(self, _r)

        """Saves a person.
        Arguments:
        sPersonID -- 
        sLastName -- 
        sFirstName -- 
        debut -- 
        _ctx -- The request context for the invocation."""
        def savePerson(self, sPersonID, sLastName, sFirstName, debut, _ctx=None):
            return _M_HenryIce.DataSvc._op_savePerson.invoke(self, ((sPersonID, sLastName, sFirstName, debut), _ctx))

        """Saves a person.
        Arguments:
        sPersonID -- 
        sLastName -- 
        sFirstName -- 
        debut -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_savePerson(self, sPersonID, sLastName, sFirstName, debut, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_savePerson.begin(self, ((sPersonID, sLastName, sFirstName, debut), _response, _ex, _sent, _ctx))

        """Saves a person.
        Arguments:
        sPersonID -- 
        sLastName -- 
        sFirstName -- 
        debut -- """
        def end_savePerson(self, _r):
            return _M_HenryIce.DataSvc._op_savePerson.end(self, _r)

        """Deletes the person.
        Arguments:
        sPersonID -- 
        _ctx -- The request context for the invocation."""
        def delPerson(self, sPersonID, _ctx=None):
            return _M_HenryIce.DataSvc._op_delPerson.invoke(self, ((sPersonID, ), _ctx))

        """Deletes the person.
        Arguments:
        sPersonID -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_delPerson(self, sPersonID, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_delPerson.begin(self, ((sPersonID, ), _response, _ex, _sent, _ctx))

        """Deletes the person.
        Arguments:
        sPersonID -- """
        def end_delPerson(self, _r):
            return _M_HenryIce.DataSvc._op_delPerson.end(self, _r)

        """Returns the unique identifier for the player.
        Arguments:
        sLastName -- 
        sFirstName -- 
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def uniquePlayerID(self, sLastName, sFirstName, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_uniquePlayerID.invoke(self, ((sLastName, sFirstName, sTeam, nSeason), _ctx))

        """Returns the unique identifier for the player.
        Arguments:
        sLastName -- 
        sFirstName -- 
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_uniquePlayerID(self, sLastName, sFirstName, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_uniquePlayerID.begin(self, ((sLastName, sFirstName, sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns the unique identifier for the player.
        Arguments:
        sLastName -- 
        sFirstName -- 
        sTeam -- 
        nSeason -- """
        def end_uniquePlayerID(self, _r):
            return _M_HenryIce.DataSvc._op_uniquePlayerID.end(self, _r)

        """Returns the identifier for the player.
        Arguments:
        sLastName -- 
        sFirstName -- 
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def playerID(self, sLastName, sFirstName, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerID.invoke(self, ((sLastName, sFirstName, sTeam, nSeason), _ctx))

        """Returns the identifier for the player.
        Arguments:
        sLastName -- 
        sFirstName -- 
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_playerID(self, sLastName, sFirstName, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerID.begin(self, ((sLastName, sFirstName, sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns the identifier for the player.
        Arguments:
        sLastName -- 
        sFirstName -- 
        sTeam -- 
        nSeason -- """
        def end_playerID(self, _r):
            return _M_HenryIce.DataSvc._op_playerID.end(self, _r)

        """Saves the player.
        Arguments:
        sPlayerID -- 
        sTeamID -- 
        nSeason -- 
        cBats -- 
        cThrows -- 
        sPosition -- 
        _ctx -- The request context for the invocation."""
        def savePlayer(self, sPlayerID, sTeamID, nSeason, cBats, cThrows, sPosition, _ctx=None):
            return _M_HenryIce.DataSvc._op_savePlayer.invoke(self, ((sPlayerID, sTeamID, nSeason, cBats, cThrows, sPosition), _ctx))

        """Saves the player.
        Arguments:
        sPlayerID -- 
        sTeamID -- 
        nSeason -- 
        cBats -- 
        cThrows -- 
        sPosition -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_savePlayer(self, sPlayerID, sTeamID, nSeason, cBats, cThrows, sPosition, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_savePlayer.begin(self, ((sPlayerID, sTeamID, nSeason, cBats, cThrows, sPosition), _response, _ex, _sent, _ctx))

        """Saves the player.
        Arguments:
        sPlayerID -- 
        sTeamID -- 
        nSeason -- 
        cBats -- 
        cThrows -- 
        sPosition -- """
        def end_savePlayer(self, _r):
            return _M_HenryIce.DataSvc._op_savePlayer.end(self, _r)

        """Deletes the player.
        Arguments:
        sPlayerID -- 
        sTeamID -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def delPlayer(self, sPlayerID, sTeamID, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_delPlayer.invoke(self, ((sPlayerID, sTeamID, nSeason), _ctx))

        """Deletes the player.
        Arguments:
        sPlayerID -- 
        sTeamID -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_delPlayer(self, sPlayerID, sTeamID, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_delPlayer.begin(self, ((sPlayerID, sTeamID, nSeason), _response, _ex, _sent, _ctx))

        """Deletes the player.
        Arguments:
        sPlayerID -- 
        sTeamID -- 
        nSeason -- """
        def end_delPlayer(self, _r):
            return _M_HenryIce.DataSvc._op_delPlayer.end(self, _r)

        """Returns the unique identifier for the team.
        Arguments:
        sName -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def uniqueTeamID(self, sName, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_uniqueTeamID.invoke(self, ((sName, nSeason), _ctx))

        """Returns the unique identifier for the team.
        Arguments:
        sName -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_uniqueTeamID(self, sName, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_uniqueTeamID.begin(self, ((sName, nSeason), _response, _ex, _sent, _ctx))

        """Returns the unique identifier for the team.
        Arguments:
        sName -- 
        nSeason -- """
        def end_uniqueTeamID(self, _r):
            return _M_HenryIce.DataSvc._op_uniqueTeamID.end(self, _r)

        """Returns the unique identifier for the team.
        Arguments:
        sNickname -- 
        sCity -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def uniqueTeamID2(self, sNickname, sCity, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_uniqueTeamID2.invoke(self, ((sNickname, sCity, nSeason), _ctx))

        """Returns the unique identifier for the team.
        Arguments:
        sNickname -- 
        sCity -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_uniqueTeamID2(self, sNickname, sCity, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_uniqueTeamID2.begin(self, ((sNickname, sCity, nSeason), _response, _ex, _sent, _ctx))

        """Returns the unique identifier for the team.
        Arguments:
        sNickname -- 
        sCity -- 
        nSeason -- """
        def end_uniqueTeamID2(self, _r):
            return _M_HenryIce.DataSvc._op_uniqueTeamID2.end(self, _r)

        """Returns the identifier for the team.
        Arguments:
        sNickname -- 
        sCity -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def teamID(self, sNickname, sCity, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamID.invoke(self, ((sNickname, sCity, nSeason), _ctx))

        """Returns the identifier for the team.
        Arguments:
        sNickname -- 
        sCity -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamID(self, sNickname, sCity, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamID.begin(self, ((sNickname, sCity, nSeason), _response, _ex, _sent, _ctx))

        """Returns the identifier for the team.
        Arguments:
        sNickname -- 
        sCity -- 
        nSeason -- """
        def end_teamID(self, _r):
            return _M_HenryIce.DataSvc._op_teamID.end(self, _r)

        """Saves the team.
        Arguments:
        sTeamID -- 
        sLeague -- 
        sDivision -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def saveTeam(self, sTeamID, sLeague, sDivision, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_saveTeam.invoke(self, ((sTeamID, sLeague, sDivision, nSeason), _ctx))

        """Saves the team.
        Arguments:
        sTeamID -- 
        sLeague -- 
        sDivision -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_saveTeam(self, sTeamID, sLeague, sDivision, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_saveTeam.begin(self, ((sTeamID, sLeague, sDivision, nSeason), _response, _ex, _sent, _ctx))

        """Saves the team.
        Arguments:
        sTeamID -- 
        sLeague -- 
        sDivision -- 
        nSeason -- """
        def end_saveTeam(self, _r):
            return _M_HenryIce.DataSvc._op_saveTeam.end(self, _r)

        """Deletes the team.
        Arguments:
        sTeamID -- 
        sLeague -- 
        sDivision -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def delTeam(self, sTeamID, sLeague, sDivision, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_delTeam.invoke(self, ((sTeamID, sLeague, sDivision, nSeason), _ctx))

        """Deletes the team.
        Arguments:
        sTeamID -- 
        sLeague -- 
        sDivision -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_delTeam(self, sTeamID, sLeague, sDivision, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_delTeam.begin(self, ((sTeamID, sLeague, sDivision, nSeason), _response, _ex, _sent, _ctx))

        """Deletes the team.
        Arguments:
        sTeamID -- 
        sLeague -- 
        sDivision -- 
        nSeason -- """
        def end_delTeam(self, _r):
            return _M_HenryIce.DataSvc._op_delTeam.end(self, _r)

        """Updates the team's division for the given season.
        Arguments:
        sTeamID -- 
        nSeason -- 
        sDivision -- 
        _ctx -- The request context for the invocation."""
        def updateTeamDivision(self, sTeamID, nSeason, sDivision, _ctx=None):
            return _M_HenryIce.DataSvc._op_updateTeamDivision.invoke(self, ((sTeamID, nSeason, sDivision), _ctx))

        """Updates the team's division for the given season.
        Arguments:
        sTeamID -- 
        nSeason -- 
        sDivision -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_updateTeamDivision(self, sTeamID, nSeason, sDivision, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_updateTeamDivision.begin(self, ((sTeamID, nSeason, sDivision), _response, _ex, _sent, _ctx))

        """Updates the team's division for the given season.
        Arguments:
        sTeamID -- 
        nSeason -- 
        sDivision -- """
        def end_updateTeamDivision(self, _r):
            return _M_HenryIce.DataSvc._op_updateTeamDivision.end(self, _r)

        """Saves won-lost record for a team and series.
        Arguments:
        sTeam -- 
        nSeason -- 
        nSeries -- 
        nWon -- 
        nLost -- 
        _ctx -- The request context for the invocation."""
        def saveTeamWL(self, sTeam, nSeason, nSeries, nWon, nLost, _ctx=None):
            return _M_HenryIce.DataSvc._op_saveTeamWL.invoke(self, ((sTeam, nSeason, nSeries, nWon, nLost), _ctx))

        """Saves won-lost record for a team and series.
        Arguments:
        sTeam -- 
        nSeason -- 
        nSeries -- 
        nWon -- 
        nLost -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_saveTeamWL(self, sTeam, nSeason, nSeries, nWon, nLost, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_saveTeamWL.begin(self, ((sTeam, nSeason, nSeries, nWon, nLost), _response, _ex, _sent, _ctx))

        """Saves won-lost record for a team and series.
        Arguments:
        sTeam -- 
        nSeason -- 
        nSeries -- 
        nWon -- 
        nLost -- """
        def end_saveTeamWL(self, _r):
            return _M_HenryIce.DataSvc._op_saveTeamWL.end(self, _r)

        """Deletes a team's won-lost record for a series.
        Arguments:
        sTeam -- 
        nSeason -- 
        nSeries -- 
        _ctx -- The request context for the invocation."""
        def delTeamWL(self, sTeam, nSeason, nSeries, _ctx=None):
            return _M_HenryIce.DataSvc._op_delTeamWL.invoke(self, ((sTeam, nSeason, nSeries), _ctx))

        """Deletes a team's won-lost record for a series.
        Arguments:
        sTeam -- 
        nSeason -- 
        nSeries -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_delTeamWL(self, sTeam, nSeason, nSeries, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_delTeamWL.begin(self, ((sTeam, nSeason, nSeries), _response, _ex, _sent, _ctx))

        """Deletes a team's won-lost record for a series.
        Arguments:
        sTeam -- 
        nSeason -- 
        nSeries -- """
        def end_delTeamWL(self, _r):
            return _M_HenryIce.DataSvc._op_delTeamWL.end(self, _r)

        """Returns the name of the team as nickname, city.
        Arguments:
        sTeamID -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def teamName(self, sTeamID, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamName.invoke(self, ((sTeamID, nSeason), _ctx))

        """Returns the name of the team as nickname, city.
        Arguments:
        sTeamID -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamName(self, sTeamID, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamName.begin(self, ((sTeamID, nSeason), _response, _ex, _sent, _ctx))

        """Returns the name of the team as nickname, city.
        Arguments:
        sTeamID -- 
        nSeason -- """
        def end_teamName(self, _r):
            return _M_HenryIce.DataSvc._op_teamName.end(self, _r)

        """Returns team names.
        Arguments:
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def teamNames(self, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamNames.invoke(self, ((nSeason, ), _ctx))

        """Returns team names.
        Arguments:
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamNames(self, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamNames.begin(self, ((nSeason, ), _response, _ex, _sent, _ctx))

        """Returns team names.
        Arguments:
        nSeason -- """
        def end_teamNames(self, _r):
            return _M_HenryIce.DataSvc._op_teamNames.end(self, _r)

        """Returns team names for a league.
        Arguments:
        sLeague -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def teamNamesInLeague(self, sLeague, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamNamesInLeague.invoke(self, ((sLeague, nSeason), _ctx))

        """Returns team names for a league.
        Arguments:
        sLeague -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamNamesInLeague(self, sLeague, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamNamesInLeague.begin(self, ((sLeague, nSeason), _response, _ex, _sent, _ctx))

        """Returns team names for a league.
        Arguments:
        sLeague -- 
        nSeason -- """
        def end_teamNamesInLeague(self, _r):
            return _M_HenryIce.DataSvc._op_teamNamesInLeague.end(self, _r)

        """Returns the the team city (league) to avoid trademark issues.
        Arguments:
        sTeamID -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def teamCity(self, sTeamID, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamCity.invoke(self, ((sTeamID, nSeason), _ctx))

        """Returns the the team city (league) to avoid trademark issues.
        Arguments:
        sTeamID -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamCity(self, sTeamID, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamCity.begin(self, ((sTeamID, nSeason), _response, _ex, _sent, _ctx))

        """Returns the the team city (league) to avoid trademark issues.
        Arguments:
        sTeamID -- 
        nSeason -- """
        def end_teamCity(self, _r):
            return _M_HenryIce.DataSvc._op_teamCity.end(self, _r)

        """Returns team cities (league) to avoid trademark issues.
        Arguments:
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def teamCities(self, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamCities.invoke(self, ((nSeason, ), _ctx))

        """Returns team cities (league) to avoid trademark issues.
        Arguments:
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamCities(self, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamCities.begin(self, ((nSeason, ), _response, _ex, _sent, _ctx))

        """Returns team cities (league) to avoid trademark issues.
        Arguments:
        nSeason -- """
        def end_teamCities(self, _r):
            return _M_HenryIce.DataSvc._op_teamCities.end(self, _r)

        """Returns team names for a league as city to avoid trademark issues.
        Arguments:
        sLeague -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def teamCitiesInLeague(self, sLeague, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamCitiesInLeague.invoke(self, ((sLeague, nSeason), _ctx))

        """Returns team names for a league as city to avoid trademark issues.
        Arguments:
        sLeague -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamCitiesInLeague(self, sLeague, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamCitiesInLeague.begin(self, ((sLeague, nSeason), _response, _ex, _sent, _ctx))

        """Returns team names for a league as city to avoid trademark issues.
        Arguments:
        sLeague -- 
        nSeason -- """
        def end_teamCitiesInLeague(self, _r):
            return _M_HenryIce.DataSvc._op_teamCitiesInLeague.end(self, _r)

        """Returns the unique identifier for the ballpark.
        Arguments:
        sName -- 
        sCity -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def uniqueBallparkID(self, sName, sCity, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_uniqueBallparkID.invoke(self, ((sName, sCity, nSeason), _ctx))

        """Returns the unique identifier for the ballpark.
        Arguments:
        sName -- 
        sCity -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_uniqueBallparkID(self, sName, sCity, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_uniqueBallparkID.begin(self, ((sName, sCity, nSeason), _response, _ex, _sent, _ctx))

        """Returns the unique identifier for the ballpark.
        Arguments:
        sName -- 
        sCity -- 
        nSeason -- """
        def end_uniqueBallparkID(self, _r):
            return _M_HenryIce.DataSvc._op_uniqueBallparkID.end(self, _r)

        """Returns the identifier for the ballpark.
        Arguments:
        sName -- 
        sCity -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def ballparkID(self, sName, sCity, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_ballparkID.invoke(self, ((sName, sCity, nSeason), _ctx))

        """Returns the identifier for the ballpark.
        Arguments:
        sName -- 
        sCity -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_ballparkID(self, sName, sCity, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_ballparkID.begin(self, ((sName, sCity, nSeason), _response, _ex, _sent, _ctx))

        """Returns the identifier for the ballpark.
        Arguments:
        sName -- 
        sCity -- 
        nSeason -- """
        def end_ballparkID(self, _r):
            return _M_HenryIce.DataSvc._op_ballparkID.end(self, _r)

        """Returns the unique identifier of the given team's home ballpark.
        Arguments:
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def uniqueBallparkIDForTeam(self, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_uniqueBallparkIDForTeam.invoke(self, ((sTeam, nSeason), _ctx))

        """Returns the unique identifier of the given team's home ballpark.
        Arguments:
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_uniqueBallparkIDForTeam(self, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_uniqueBallparkIDForTeam.begin(self, ((sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns the unique identifier of the given team's home ballpark.
        Arguments:
        sTeam -- 
        nSeason -- """
        def end_uniqueBallparkIDForTeam(self, _r):
            return _M_HenryIce.DataSvc._op_uniqueBallparkIDForTeam.end(self, _r)

        """Returns the identifier of the given team's home ballpark.
        Arguments:
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def ballparkIDForTeam(self, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_ballparkIDForTeam.invoke(self, ((sTeam, nSeason), _ctx))

        """Returns the identifier of the given team's home ballpark.
        Arguments:
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_ballparkIDForTeam(self, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_ballparkIDForTeam.begin(self, ((sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns the identifier of the given team's home ballpark.
        Arguments:
        sTeam -- 
        nSeason -- """
        def end_ballparkIDForTeam(self, _r):
            return _M_HenryIce.DataSvc._op_ballparkIDForTeam.end(self, _r)

        """Saves the team-ballpark mapping for a season.
        Arguments:
        sTeam -- 
        sBallpark -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def saveTeamBallpark(self, sTeam, sBallpark, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_saveTeamBallpark.invoke(self, ((sTeam, sBallpark, nSeason), _ctx))

        """Saves the team-ballpark mapping for a season.
        Arguments:
        sTeam -- 
        sBallpark -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_saveTeamBallpark(self, sTeam, sBallpark, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_saveTeamBallpark.begin(self, ((sTeam, sBallpark, nSeason), _response, _ex, _sent, _ctx))

        """Saves the team-ballpark mapping for a season.
        Arguments:
        sTeam -- 
        sBallpark -- 
        nSeason -- """
        def end_saveTeamBallpark(self, _r):
            return _M_HenryIce.DataSvc._op_saveTeamBallpark.end(self, _r)

        """Returns the default lineup for the given team and season when facing L/R pitcher.
        Arguments:
        sTeam -- 
        cPitcherHand -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def defaultLineup(self, sTeam, cPitcherHand, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_defaultLineup.invoke(self, ((sTeam, cPitcherHand, nSeason), _ctx))

        """Returns the default lineup for the given team and season when facing L/R pitcher.
        Arguments:
        sTeam -- 
        cPitcherHand -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_defaultLineup(self, sTeam, cPitcherHand, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_defaultLineup.begin(self, ((sTeam, cPitcherHand, nSeason), _response, _ex, _sent, _ctx))

        """Returns the default lineup for the given team and season when facing L/R pitcher.
        Arguments:
        sTeam -- 
        cPitcherHand -- 
        nSeason -- """
        def end_defaultLineup(self, _r):
            return _M_HenryIce.DataSvc._op_defaultLineup.end(self, _r)

        """Saves the default lineup for a team and season when facing a L/R pitcher.
        Arguments:
        sTeam -- 
        cPitcherHand -- 
        players -- 
        positions -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def saveDefaultLineup(self, sTeam, cPitcherHand, players, positions, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_saveDefaultLineup.invoke(self, ((sTeam, cPitcherHand, players, positions, nSeason), _ctx))

        """Saves the default lineup for a team and season when facing a L/R pitcher.
        Arguments:
        sTeam -- 
        cPitcherHand -- 
        players -- 
        positions -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_saveDefaultLineup(self, sTeam, cPitcherHand, players, positions, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_saveDefaultLineup.begin(self, ((sTeam, cPitcherHand, players, positions, nSeason), _response, _ex, _sent, _ctx))

        """Saves the default lineup for a team and season when facing a L/R pitcher.
        Arguments:
        sTeam -- 
        cPitcherHand -- 
        players -- 
        positions -- 
        nSeason -- """
        def end_saveDefaultLineup(self, _r):
            return _M_HenryIce.DataSvc._op_saveDefaultLineup.end(self, _r)

        """Returns labels for player data.
        Arguments:
        _ctx -- The request context for the invocation."""
        def playerLabels(self, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerLabels.invoke(self, ((), _ctx))

        """Returns labels for player data.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_playerLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for player data.
        Arguments:"""
        def end_playerLabels(self, _r):
            return _M_HenryIce.DataSvc._op_playerLabels.end(self, _r)

        """Returns data for the given player and season.
        Arguments:
        sPlayer -- 
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def playerData(self, sPlayer, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerData.invoke(self, ((sPlayer, sTeam, nSeason), _ctx))

        """Returns data for the given player and season.
        Arguments:
        sPlayer -- 
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_playerData(self, sPlayer, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerData.begin(self, ((sPlayer, sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns data for the given player and season.
        Arguments:
        sPlayer -- 
        sTeam -- 
        nSeason -- """
        def end_playerData(self, _r):
            return _M_HenryIce.DataSvc._op_playerData.end(self, _r)

        """Returns the batting side for the given player and season.
        Arguments:
        sPlayer -- 
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def playerBattingSide(self, sPlayer, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerBattingSide.invoke(self, ((sPlayer, sTeam, nSeason), _ctx))

        """Returns the batting side for the given player and season.
        Arguments:
        sPlayer -- 
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_playerBattingSide(self, sPlayer, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerBattingSide.begin(self, ((sPlayer, sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns the batting side for the given player and season.
        Arguments:
        sPlayer -- 
        sTeam -- 
        nSeason -- """
        def end_playerBattingSide(self, _r):
            return _M_HenryIce.DataSvc._op_playerBattingSide.end(self, _r)

        """Returns the throwing hand for the given player and season.
        Arguments:
        sPlayer -- 
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def playerThrowingHand(self, sPlayer, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerThrowingHand.invoke(self, ((sPlayer, sTeam, nSeason), _ctx))

        """Returns the throwing hand for the given player and season.
        Arguments:
        sPlayer -- 
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_playerThrowingHand(self, sPlayer, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerThrowingHand.begin(self, ((sPlayer, sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns the throwing hand for the given player and season.
        Arguments:
        sPlayer -- 
        sTeam -- 
        nSeason -- """
        def end_playerThrowingHand(self, _r):
            return _M_HenryIce.DataSvc._op_playerThrowingHand.end(self, _r)

        """Returns data for the given player and season.
        Arguments:
        sPlayerID -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def playerData2(self, sPlayerID, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerData2.invoke(self, ((sPlayerID, nSeason), _ctx))

        """Returns data for the given player and season.
        Arguments:
        sPlayerID -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_playerData2(self, sPlayerID, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerData2.begin(self, ((sPlayerID, nSeason), _response, _ex, _sent, _ctx))

        """Returns data for the given player and season.
        Arguments:
        sPlayerID -- 
        nSeason -- """
        def end_playerData2(self, _r):
            return _M_HenryIce.DataSvc._op_playerData2.end(self, _r)

        """Returns player and lineup data based on name, (optional) team and season.
        Arguments:
        sLastName -- 
        sFirstName -- 
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def findPlayers(self, sLastName, sFirstName, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_findPlayers.invoke(self, ((sLastName, sFirstName, sTeam, nSeason), _ctx))

        """Returns player and lineup data based on name, (optional) team and season.
        Arguments:
        sLastName -- 
        sFirstName -- 
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_findPlayers(self, sLastName, sFirstName, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_findPlayers.begin(self, ((sLastName, sFirstName, sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns player and lineup data based on name, (optional) team and season.
        Arguments:
        sLastName -- 
        sFirstName -- 
        sTeam -- 
        nSeason -- """
        def end_findPlayers(self, _r):
            return _M_HenryIce.DataSvc._op_findPlayers.end(self, _r)

        """Returns player and lineup data based on team and season.
        Arguments:
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def findPlayers2(self, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_findPlayers2.invoke(self, ((sTeam, nSeason), _ctx))

        """Returns player and lineup data based on team and season.
        Arguments:
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_findPlayers2(self, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_findPlayers2.begin(self, ((sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns player and lineup data based on team and season.
        Arguments:
        sTeam -- 
        nSeason -- """
        def end_findPlayers2(self, _r):
            return _M_HenryIce.DataSvc._op_findPlayers2.end(self, _r)

        """Returns games for the player and season.
        Arguments:
        sPlayer -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def gamesForPlayer(self, sPlayer, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_gamesForPlayer.invoke(self, ((sPlayer, nSeason), _ctx))

        """Returns games for the player and season.
        Arguments:
        sPlayer -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_gamesForPlayer(self, sPlayer, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_gamesForPlayer.begin(self, ((sPlayer, nSeason), _response, _ex, _sent, _ctx))

        """Returns games for the player and season.
        Arguments:
        sPlayer -- 
        nSeason -- """
        def end_gamesForPlayer(self, _r):
            return _M_HenryIce.DataSvc._op_gamesForPlayer.end(self, _r)

        """Returns games for the team and season.
        Arguments:
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def gamesForTeam(self, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_gamesForTeam.invoke(self, ((sTeam, nSeason), _ctx))

        """Returns games for the team and season.
        Arguments:
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_gamesForTeam(self, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_gamesForTeam.begin(self, ((sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns games for the team and season.
        Arguments:
        sTeam -- 
        nSeason -- """
        def end_gamesForTeam(self, _r):
            return _M_HenryIce.DataSvc._op_gamesForTeam.end(self, _r)

        """Returns games for the player and season.
        Arguments:
        sPlayer -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def playerGameData(self, sPlayer, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerGameData.invoke(self, ((sPlayer, nSeason), _ctx))

        """Returns games for the player and season.
        Arguments:
        sPlayer -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_playerGameData(self, sPlayer, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_playerGameData.begin(self, ((sPlayer, nSeason), _response, _ex, _sent, _ctx))

        """Returns games for the player and season.
        Arguments:
        sPlayer -- 
        nSeason -- """
        def end_playerGameData(self, _r):
            return _M_HenryIce.DataSvc._op_playerGameData.end(self, _r)

        """Returns games for the team and season.
        Arguments:
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def teamGameData(self, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamGameData.invoke(self, ((sTeam, nSeason), _ctx))

        """Returns games for the team and season.
        Arguments:
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamGameData(self, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamGameData.begin(self, ((sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns games for the team and season.
        Arguments:
        sTeam -- 
        nSeason -- """
        def end_teamGameData(self, _r):
            return _M_HenryIce.DataSvc._op_teamGameData.end(self, _r)

        """Returns plays for the game.
        Arguments:
        nGame -- 
        _ctx -- The request context for the invocation."""
        def gamePlays(self, nGame, _ctx=None):
            return _M_HenryIce.DataSvc._op_gamePlays.invoke(self, ((nGame, ), _ctx))

        """Returns plays for the game.
        Arguments:
        nGame -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_gamePlays(self, nGame, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_gamePlays.begin(self, ((nGame, ), _response, _ex, _sent, _ctx))

        """Returns plays for the game.
        Arguments:
        nGame -- """
        def end_gamePlays(self, _r):
            return _M_HenryIce.DataSvc._op_gamePlays.end(self, _r)

        """Returns plays for the batter and season.
        Arguments:
        sPlayer -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def batterPlays(self, sPlayer, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_batterPlays.invoke(self, ((sPlayer, nSeason), _ctx))

        """Returns plays for the batter and season.
        Arguments:
        sPlayer -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_batterPlays(self, sPlayer, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_batterPlays.begin(self, ((sPlayer, nSeason), _response, _ex, _sent, _ctx))

        """Returns plays for the batter and season.
        Arguments:
        sPlayer -- 
        nSeason -- """
        def end_batterPlays(self, _r):
            return _M_HenryIce.DataSvc._op_batterPlays.end(self, _r)

        """Returns the team's cumulative roster for the entire season.
        Arguments:
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def roster(self, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_roster.invoke(self, ((sTeam, nSeason), _ctx))

        """Returns the team's cumulative roster for the entire season.
        Arguments:
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_roster(self, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_roster.begin(self, ((sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns the team's cumulative roster for the entire season.
        Arguments:
        sTeam -- 
        nSeason -- """
        def end_roster(self, _r):
            return _M_HenryIce.DataSvc._op_roster.end(self, _r)

        """Returns labels for schedule data.
        Arguments:
        _ctx -- The request context for the invocation."""
        def scheduleLabels(self, _ctx=None):
            return _M_HenryIce.DataSvc._op_scheduleLabels.invoke(self, ((), _ctx))

        """Returns labels for schedule data.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_scheduleLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_scheduleLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for schedule data.
        Arguments:"""
        def end_scheduleLabels(self, _r):
            return _M_HenryIce.DataSvc._op_scheduleLabels.end(self, _r)

        """Returns the complete schedule for the season.
        Arguments:
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def schedule(self, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_schedule.invoke(self, ((nSeason, ), _ctx))

        """Returns the complete schedule for the season.
        Arguments:
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_schedule(self, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_schedule.begin(self, ((nSeason, ), _response, _ex, _sent, _ctx))

        """Returns the complete schedule for the season.
        Arguments:
        nSeason -- """
        def end_schedule(self, _r):
            return _M_HenryIce.DataSvc._op_schedule.end(self, _r)

        """Returns the team's schedule for the season.
        Arguments:
        sTeam -- 
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def teamSchedule(self, sTeam, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamSchedule.invoke(self, ((sTeam, nSeason), _ctx))

        """Returns the team's schedule for the season.
        Arguments:
        sTeam -- 
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_teamSchedule(self, sTeam, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_teamSchedule.begin(self, ((sTeam, nSeason), _response, _ex, _sent, _ctx))

        """Returns the team's schedule for the season.
        Arguments:
        sTeam -- 
        nSeason -- """
        def end_teamSchedule(self, _r):
            return _M_HenryIce.DataSvc._op_teamSchedule.end(self, _r)

        """Returns labels for ballpark data.
        Arguments:
        _ctx -- The request context for the invocation."""
        def ballparkLabels(self, _ctx=None):
            return _M_HenryIce.DataSvc._op_ballparkLabels.invoke(self, ((), _ctx))

        """Returns labels for ballpark data.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_ballparkLabels(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_ballparkLabels.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns labels for ballpark data.
        Arguments:"""
        def end_ballparkLabels(self, _r):
            return _M_HenryIce.DataSvc._op_ballparkLabels.end(self, _r)

        """Returns all ballparks in the database.
        Arguments:
        _ctx -- The request context for the invocation."""
        def ballparks(self, _ctx=None):
            return _M_HenryIce.DataSvc._op_ballparks.invoke(self, ((), _ctx))

        """Returns all ballparks in the database.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_ballparks(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_ballparks.begin(self, ((), _response, _ex, _sent, _ctx))

        """Returns all ballparks in the database.
        Arguments:"""
        def end_ballparks(self, _r):
            return _M_HenryIce.DataSvc._op_ballparks.end(self, _r)

        """Loads schedules, default lineups and stats for the given season.
        Arguments:
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def loadSeasonSimulationData(self, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_loadSeasonSimulationData.invoke(self, ((nSeason, ), _ctx))

        """Loads schedules, default lineups and stats for the given season.
        Arguments:
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_loadSeasonSimulationData(self, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_loadSeasonSimulationData.begin(self, ((nSeason, ), _response, _ex, _sent, _ctx))

        """Loads schedules, default lineups and stats for the given season.
        Arguments:
        nSeason -- """
        def end_loadSeasonSimulationData(self, _r):
            return _M_HenryIce.DataSvc._op_loadSeasonSimulationData.end(self, _r)

        """Loads the stats cache for the given season.
        Arguments:
        nSeason -- 
        _ctx -- The request context for the invocation."""
        def loadStats(self, nSeason, _ctx=None):
            return _M_HenryIce.DataSvc._op_loadStats.invoke(self, ((nSeason, ), _ctx))

        """Loads the stats cache for the given season.
        Arguments:
        nSeason -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_loadStats(self, nSeason, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_loadStats.begin(self, ((nSeason, ), _response, _ex, _sent, _ctx))

        """Loads the stats cache for the given season.
        Arguments:
        nSeason -- """
        def end_loadStats(self, _r):
            return _M_HenryIce.DataSvc._op_loadStats.end(self, _r)

        """Clears the cached stats and forces reload.
        Arguments:
        _ctx -- The request context for the invocation."""
        def clearStats(self, _ctx=None):
            return _M_HenryIce.DataSvc._op_clearStats.invoke(self, ((), _ctx))

        """Clears the cached stats and forces reload.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_clearStats(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_clearStats.begin(self, ((), _response, _ex, _sent, _ctx))

        """Clears the cached stats and forces reload.
        Arguments:"""
        def end_clearStats(self, _r):
            return _M_HenryIce.DataSvc._op_clearStats.end(self, _r)

        """Clears the data cache and forces reload.
        Arguments:
        _ctx -- The request context for the invocation."""
        def clearDataCache(self, _ctx=None):
            return _M_HenryIce.DataSvc._op_clearDataCache.invoke(self, ((), _ctx))

        """Clears the data cache and forces reload.
        Arguments:
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_clearDataCache(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_clearDataCache.begin(self, ((), _response, _ex, _sent, _ctx))

        """Clears the data cache and forces reload.
        Arguments:"""
        def end_clearDataCache(self, _r):
            return _M_HenryIce.DataSvc._op_clearDataCache.end(self, _r)

        """Converts the string to a Date.
        Arguments:
        s -- 
        _ctx -- The request context for the invocation."""
        def stringToDate(self, s, _ctx=None):
            return _M_HenryIce.DataSvc._op_stringToDate.invoke(self, ((s, ), _ctx))

        """Converts the string to a Date.
        Arguments:
        s -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_stringToDate(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_stringToDate.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        """Converts the string to a Date.
        Arguments:
        s -- """
        def end_stringToDate(self, _r):
            return _M_HenryIce.DataSvc._op_stringToDate.end(self, _r)

        """Converts the Date to a string.
        Arguments:
        d -- 
        _ctx -- The request context for the invocation."""
        def dateToString(self, d, _ctx=None):
            return _M_HenryIce.DataSvc._op_dateToString.invoke(self, ((d, ), _ctx))

        """Converts the Date to a string.
        Arguments:
        d -- 
        _response -- The asynchronous response callback.
        _ex -- The asynchronous exception callback.
        _sent -- The asynchronous sent callback.
        _ctx -- The request context for the invocation.
        Returns: An asynchronous result object for the invocation."""
        def begin_dateToString(self, d, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_HenryIce.DataSvc._op_dateToString.begin(self, ((d, ), _response, _ex, _sent, _ctx))

        """Converts the Date to a string.
        Arguments:
        d -- """
        def end_dateToString(self, _r):
            return _M_HenryIce.DataSvc._op_dateToString.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_HenryIce.DataSvcPrx.ice_checkedCast(proxy, '::HenryIce::DataSvc', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_HenryIce.DataSvcPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::HenryIce::DataSvc'
        ice_staticId = staticmethod(ice_staticId)

    _M_HenryIce._t_DataSvcPrx = IcePy.defineProxy('::HenryIce::DataSvc', DataSvcPrx)

    _M_HenryIce._t_DataSvc = IcePy.defineClass('::HenryIce::DataSvc', DataSvc, -1, (), True, False, None, (), ())
    DataSvc._ice_type = _M_HenryIce._t_DataSvc

    DataSvc._op_henryVersion = IcePy.Operation('henryVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_serverVersion = IcePy.Operation('serverVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_setRetroDBPath = IcePy.Operation('setRetroDBPath', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    DataSvc._op_setHenryDBPath = IcePy.Operation('setHenryDBPath', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    DataSvc._op_setGameDataAvailable = IcePy.Operation('setGameDataAvailable', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    DataSvc._op_personID = IcePy.Operation('personID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_personName = IcePy.Operation('personName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_savePerson = IcePy.Operation('savePerson', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_Date, False, 0)), (), None, ())
    DataSvc._op_delPerson = IcePy.Operation('delPerson', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    DataSvc._op_uniquePlayerID = IcePy.Operation('uniquePlayerID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_playerID = IcePy.Operation('playerID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_savePlayer = IcePy.Operation('savePlayer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    DataSvc._op_delPlayer = IcePy.Operation('delPlayer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    DataSvc._op_uniqueTeamID = IcePy.Operation('uniqueTeamID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_uniqueTeamID2 = IcePy.Operation('uniqueTeamID2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_teamID = IcePy.Operation('teamID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_saveTeam = IcePy.Operation('saveTeam', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    DataSvc._op_delTeam = IcePy.Operation('delTeam', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    DataSvc._op_updateTeamDivision = IcePy.Operation('updateTeamDivision', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    DataSvc._op_saveTeamWL = IcePy.Operation('saveTeamWL', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    DataSvc._op_delTeamWL = IcePy.Operation('delTeamWL', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    DataSvc._op_teamName = IcePy.Operation('teamName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_teamNames = IcePy.Operation('teamNames', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_teamNamesInLeague = IcePy.Operation('teamNamesInLeague', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_teamCity = IcePy.Operation('teamCity', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_teamCities = IcePy.Operation('teamCities', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_teamCitiesInLeague = IcePy.Operation('teamCitiesInLeague', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_uniqueBallparkID = IcePy.Operation('uniqueBallparkID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_ballparkID = IcePy.Operation('ballparkID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_uniqueBallparkIDForTeam = IcePy.Operation('uniqueBallparkIDForTeam', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_ballparkIDForTeam = IcePy.Operation('ballparkIDForTeam', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_saveTeamBallpark = IcePy.Operation('saveTeamBallpark', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    DataSvc._op_defaultLineup = IcePy.Operation('defaultLineup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    DataSvc._op_saveDefaultLineup = IcePy.Operation('saveDefaultLineup', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_HenryIce._t_StringVector, False, 0), ((), _M_HenryIce._t_IntVector, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    DataSvc._op_playerLabels = IcePy.Operation('playerLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_playerData = IcePy.Operation('playerData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_playerBattingSide = IcePy.Operation('playerBattingSide', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_playerThrowingHand = IcePy.Operation('playerThrowingHand', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    DataSvc._op_playerData2 = IcePy.Operation('playerData2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_findPlayers = IcePy.Operation('findPlayers', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    DataSvc._op_findPlayers2 = IcePy.Operation('findPlayers2', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    DataSvc._op_gamesForPlayer = IcePy.Operation('gamesForPlayer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    DataSvc._op_gamesForTeam = IcePy.Operation('gamesForTeam', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    DataSvc._op_playerGameData = IcePy.Operation('playerGameData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_teamGameData = IcePy.Operation('teamGameData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_gamePlays = IcePy.Operation('gamePlays', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_batterPlays = IcePy.Operation('batterPlays', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_roster = IcePy.Operation('roster', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    DataSvc._op_scheduleLabels = IcePy.Operation('scheduleLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_schedule = IcePy.Operation('schedule', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    DataSvc._op_teamSchedule = IcePy.Operation('teamSchedule', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    DataSvc._op_ballparkLabels = IcePy.Operation('ballparkLabels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringVector, False, 0), ())
    DataSvc._op_ballparks = IcePy.Operation('ballparks', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_HenryIce._t_StringMatrix, False, 0), ())
    DataSvc._op_loadSeasonSimulationData = IcePy.Operation('loadSeasonSimulationData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    DataSvc._op_loadStats = IcePy.Operation('loadStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    DataSvc._op_clearStats = IcePy.Operation('clearStats', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    DataSvc._op_clearDataCache = IcePy.Operation('clearDataCache', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    DataSvc._op_stringToDate = IcePy.Operation('stringToDate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_HenryIce._t_Date, False, 0), ())
    DataSvc._op_dateToString = IcePy.Operation('dateToString', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_HenryIce._t_Date, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_HenryIce.DataSvc = DataSvc
    del DataSvc

    _M_HenryIce.DataSvcPrx = DataSvcPrx
    del DataSvcPrx

# End of module HenryIce
